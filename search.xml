<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>往年试卷总结</title>
    <url>/2020/08/29/bvcyig/</url>
    <content><![CDATA[<h2 id="2003-年"><a href="#2003-年" class="headerlink" title="2003 年"></a>2003 年</h2><p>函数参数是对象时，最好传入引用<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598070604057-522f4ec9-33e6-4573-a803-6ae25edaeaa2.png#align=left&display=inline&height=509&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1018&originWidth=1890&size=339868&status=done&style=none&width=945" alt="image.png"></p>
<h2 id="2013-年"><a href="#2013-年" class="headerlink" title="2013 年"></a>2013 年</h2><h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><p>C++中的空类：<br>声明时编译器不会产生任何函数，只会生成 1byte 的占位符<br>编译器只会在需要的时候生成 6 个成员函数：一个缺省的构造函数、一个拷贝构造函数、一个析构函数、一个赋值运算符、一对取址运算符和一个 this 指针。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Empty</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Empty();</span><br><span class="line">Empty(<span class="keyword">const</span> Empty&amp;);</span><br><span class="line">~Empty();</span><br><span class="line">Empty&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Empty&amp; rhs);</span><br><span class="line">Empty* <span class="keyword">operator</span>&amp;();</span><br><span class="line"><span class="keyword">const</span> Empty* <span class="keyword">operator</span>&amp;() <span class="keyword">const</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="二"><a href="#二" class="headerlink" title="二"></a>二</h3><p>指针移动时最好重新声明一个局部变量<br>返回局部变量会造成调用的错误</p>
<h3 id="三"><a href="#三" class="headerlink" title="三"></a>三</h3><p>赋值兼容原则；<br>将基类的指针赋值给派生类时，除非是虚函数，否则皆调用基类的函数。当函数为虚函数时，若参数有默认值则采用父类的默认值<br>构造和析构函数<br>1、子类对象在创建时会首先调用父类的构造函数<br>2、父类构造函数执行结束后，执行子类的构造函数<br>3、当父类的构造函数有参数时，需要在子类的初始化列表中显示调用<br>4、析构函数调用的先后顺序与构造函数相反<br>即 先构造父类，再构造成员变量、最后构造自己<br>     先析构自己，在析构成员变量、最后析构父类<br>                            //先构造的对象，后释放<br>参照：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Object(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Object()"</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Object()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"~Object()"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> :</span> <span class="keyword">public</span> Object</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Parent(<span class="keyword">const</span> <span class="keyword">char</span>* s) : Object(s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Parent()"</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Parent()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"~Parent()"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span> <span class="keyword">public</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Object o1;</span><br><span class="line">    Object o2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Child() : o2(<span class="string">"o2"</span>), o1(<span class="string">"o1"</span>), Parent(<span class="string">"Parameter from Child!"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Child()"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Child()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"~Child()"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Child child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"demo05_extend_construct_destory.cpp"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    run05();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object() Parameter from Child!</span><br><span class="line">Parent() Parameter from Child!</span><br><span class="line">Object() o1</span><br><span class="line">Object() o2</span><br><span class="line">Child()</span><br><span class="line">~Child()</span><br><span class="line">~Object()</span><br><span class="line">~Object()</span><br><span class="line">~Parent()</span><br><span class="line">~Object()</span><br></pre></td></tr></table></figure>

<p>同名：当子类成员变量与父类成员变量同名时，子类依然从父类继承同名成员<br>在子类中通过作用域分辨符::进行同名成员区分（<strong>在派生类中使用基类的同名成员，显式地使用类名限定符</strong>）<br>同名成员存储在内存中的不同位置<br>异常继承：<br>try catch 按顺序抛出异常，若基类异常在子类异常之前则抛出基类的异常</p>
<h2 id="2019-总结"><a href="#2019-总结" class="headerlink" title="2019 总结"></a>2019 总结</h2><h3 id="函数的默认参数"><a href="#函数的默认参数" class="headerlink" title="函数的默认参数"></a>函数的默认参数</h3><p>在具有多个参数的函数中指定默认值时,默认参数都必须出现在不默认参数的右边,一旦某个参数开始指定默认值,它右边的所有参数都必须指定默认值.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i1 = <span class="number">1</span>, <span class="keyword">int</span> i2 =<span class="number">2</span>, <span class="keyword">int</span> i3 = <span class="number">3</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用函数 f()</span></span><br><span class="line">f();             <span class="comment">//正确, i1=1, i2=2, i3=3</span></span><br><span class="line">f(<span class="number">3</span>);            <span class="comment">//正确, i1=3, i2=2, i3=3</span></span><br><span class="line">f(<span class="number">2</span>, <span class="number">3</span>);         <span class="comment">//正确, i1=2, i2=3, i3=3</span></span><br><span class="line">f(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);      <span class="comment">//正确, i1=4, i2=5, i3=6</span></span><br><span class="line">f(, <span class="number">2</span>, <span class="number">3</span>);       <span class="comment">//错误, i1默认,其右边的i2和i3没有默认</span></span><br></pre></td></tr></table></figure>

<h3 id="模版与宏"><a href="#模版与宏" class="headerlink" title="模版与宏"></a>模版与宏</h3><p>1.宏是在预处理阶段处理，模板是在编译阶段处理 2.宏不会进行类型检查，只会单纯的进行文本替换，模板会进行类型检查。比如下面代码模板就会出错，而宏不会<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597652674755-e00ca635-3c27-4020-963a-1d5df105ed82.png#align=left&display=inline&height=204&margin=%5Bobject%20Object%5D&originHeight=204&originWidth=201&size=0&status=done&style=none&width=201" alt=""> 3.宏直接就可以产生代码，而编译器遇到模板定义时，并不产生代码，只有当模板实例化后时才会产生代码。</p>
<h2 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h2><p>指针的输出<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597221256791-c3453b5b-3369-4661-83af-c364a053ca2a.png#align=left&display=inline&height=354&margin=%5Bobject%20Object%5D&originHeight=354&originWidth=682&status=done&style=none&width=682" alt=""></p>
<p>取消常量属性<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597996641582-780e9713-6126-46af-857d-f14e852f01b8.png#align=left&display=inline&height=207&margin=%5Bobject%20Object%5D&name=image.png&originHeight=414&originWidth=1982&size=165666&status=done&style=none&width=991" alt="image.png"></p>
<p>不能间接改变常量<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597997163696-bbaa065e-71aa-478c-8a46-7d851e541398.png#align=left&display=inline&height=223&margin=%5Bobject%20Object%5D&name=image.png&originHeight=446&originWidth=968&size=43689&status=done&style=none&width=484" alt="image.png"></p>
]]></content>
  </entry>
  <entry>
    <title>2019-review</title>
    <url>/2020/08/29/ecekyq/</url>
    <content><![CDATA[<h1 id="review"><a href="#review" class="headerlink" title="review"></a>review</h1><h2 id="0-卷子"><a href="#0-卷子" class="headerlink" title="0. 卷子"></a>0. 卷子</h2><ol>
<li>PPT 范围外不考</li>
<li>review 中提到的是重点</li>
<li>3：3：3</li>
<li>：<ul>
<li>编程设计思想：小字、动画</li>
<li>不会考概念性的</li>
</ul>
</li>
<li>程序理解题：你就是编译器系列、电脑都比你强系列</li>
<li>代码分析：找问题，完形填空</li>
<li>设计：写一些代码</li>
<li>时间不够先记概念。</li>
</ol>
<h2 id="1-part-1"><a href="#1-part-1" class="headerlink" title="1. part_1"></a>1. part_1</h2><ol>
<li>to me：回去康康函数指针</li>
<li>C++那个关系图，一定要了解一下（10 分）<ul>
<li>简答</li>
</ul>
</li>
<li>宏：</li>
</ol>
<ul>
<li>头文件中的作用</li>
<li>如何定义和 assert debug 相关</li>
<li>宏和 C++新技术的不同</li>
<li>可以被 consts，enums，inlines 替代<ul>
<li>区别</li>
</ul>
</li>
</ul>
<ol start="3">
<li>const：</li>
</ol>
<ul>
<li>static const：赋值放在 cpp 之外并不允许二次出现 static<ul>
<li>定义在类外</li>
<li>不许二次定义</li>
<li>要当变量用得再声明</li>
<li>新标准可以放在声明时候赋值，但是此时是一个常量，为了取地址要二次声明。但是这个时候不许赋值了？？？？？？？？？？？？？？？？？？？？？？？</li>
</ul>
</li>
<li>能 const 就 const</li>
<li>iterator：<ul>
<li>const T*  t：正确但不方便<ul>
<li>改进</li>
</ul>
</li>
<li>T* const  t：指针不能动，不太对</li>
</ul>
</li>
<li>return value：返回右值要 const 类型</li>
<li>下标操作符需要两个类型：是 const 函数和不是 const 函数</li>
</ul>
<ol start="4">
<li>控制流没啥好考的</li>
<li>操作符重载：写法、标准格式<ul>
<li>[]</li>
<li>二义性</li>
</ul>
</li>
<li>表达式：<ul>
<li>左值、右值</li>
<li>优先级</li>
<li>副作用：自增自减</li>
</ul>
</li>
<li>inline：内联函数<ul>
<li>推荐而非强制（你瞎用会被编译器忽略</li>
<li>内联的本质类似于替换（就和宏类似</li>
<li>函数指针不一定会内联<ul>
<li>指针要有地址，如果内联了可能没指向</li>
<li>看调用方式</li>
</ul>
</li>
</ul>
</li>
<li>编译模块<ul>
<li>什么时候需要头文件？<ul>
<li>C++按照编译单元进行编译。</li>
<li>在模块中的使用需要提前有 include 头文件</li>
<li>“.h”引入需要小心重新编译（引入的头文件有改变，所有依赖的都要改</li>
<li>不引入头文件：使用<strong>引用、指针</strong>只需要一个前项声明<ul>
<li>可以隔离模块</li>
</ul>
</li>
<li>结论：声明是肯定要有的，看你需不需要大小来决定要不要头文件</li>
</ul>
</li>
</ul>
</li>
<li></li>
<li>静态变量使用时的声明方法</li>
<li>non-local non-class 的东西</li>
</ol>
<h2 id="2-part-2"><a href="#2-part-2" class="headerlink" title="2. part_2"></a>2. part_2</h2><ol>
<li>模板和异常用到的比较简单，不会考的很复杂</li>
<li>单例模式：<ul>
<li>确定非局部状态变量状态，把其变成类内的</li>
</ul>
</li>
<li>类的构造和析构</li>
<li>对象的初始化和对象的赋值</li>
<li>类的分配和释放函数的使用</li>
<li>对象的按值传递和按引用传递、按常量传递、按指针传递</li>
<li></li>
<li>隐式/显式类型转换<ul>
<li>隐式：兼容类型、构造函数<ul>
<li>explicit：防止隐式类型转换</li>
<li>引用和指针因为不进行构造，不会转化</li>
</ul>
</li>
</ul>
</li>
<li>编译器帮你生成的和需要自己写的</li>
<li>操作符重载</li>
</ol>
<ul>
<li>友元/内嵌<ul>
<li>内嵌在不同的标准实现不同</li>
<li>会一种就行</li>
<li>能认不用能写</li>
</ul>
</li>
</ul>
<ol start="11">
<li>模板、泛型</li>
<li>是否需要新类型？</li>
</ol>
<h2 id="3-eg"><a href="#3-eg" class="headerlink" title="3. eg"></a>3. eg</h2><ol>
<li>call by value/ref<ul>
<li>string 也是类，有 string 也要调用拷贝构造函数</li>
<li>想调虚函数最好传指针</li>
<li>按值传递会造成</li>
</ul>
</li>
<li>操作符重载：<ul>
<li>返回局部变量的引用或者指针有被销毁的风险</li>
<li>大多数情况返回局部变量</li>
<li>左值结果一般返回引用，可以继续使用（连着用</li>
<li>二义性</li>
</ul>
</li>
<li>初始化：<ul>
<li>一般都要自己做一遍</li>
<li>成员初始化表：const、类（成员对象，只要一次拷贝构造）<ul>
<li>内置类型放哪都行</li>
<li>成员对象不想拷贝构造的话，不传值就行</li>
</ul>
</li>
<li>构造顺序<ul>
<li>多继承、虚继承</li>
<li>成员对象顺序</li>
</ul>
</li>
</ul>
</li>
<li>构造函数：<ul>
<li>默认 or not</li>
<li>调用顺序</li>
<li>在构造函数里调虚函数相当于调自己的函数（没有纯虚函数表也没有对象</li>
</ul>
</li>
<li>拷贝构造：<ul>
<li>拷贝构造、拷贝赋值</li>
<li>自己的拷贝函数要完整：<ul>
<li>成员对象全调拷贝函数</li>
<li>指针数组要申请新空间</li>
<li>赋值和拷贝构造同时更新</li>
</ul>
</li>
<li>基类成员私有：子类拷贝构造在初始化值表（长得很像成员初始化表）里用<ul>
<li>同步更新拷贝赋值：直接调用父类函数</li>
</ul>
</li>
</ul>
</li>
<li>析构函数：有多态定义为虚函数<ul>
<li>标准库都没有虚析构函数，最好不要继承</li>
</ul>
</li>
<li>静态变量：<ul>
<li>对于和，成员变量必须通过构造函数的的方式初始化。例如：上述程序中的 r 和 d 变量的初始化。<br>对于，static 成员变量需要在类定义体外进行初始化与定义，因为 static 数据成员独立该类的任意对象存在，它是与类关联的对象，不与类对象关联。例如：上述程序中的 c 变量的初始化。<br>对于，该类型成员可以直接在类中初始化，也可以在类中声明，在类定义体外进行定义。例如：上述程序中的 x 和 xx 变量。<br>对于，该类型也是可以在类中声明在类定义体外进行定义，或者直接在类中定义初始化。例如：上述程序中的 z 和 zz 变量。```c<br>#include <iostream></li>
</ul>
</li>
</ol>
<p>using namespace std;</p>
<p>class Test<br>{<br>public:<br>Test() : y(1), r(y), d(3){} //对于常量型成员变量和引用型成员变量，必须通过参数化列表的方式进行初始化。<br>~Test(){}</p>
<pre><code>int y;      //普通变量成员
int &amp;r;     //引用成员变量
const int d;    //常量成员变量
static int c;   //静态成员变量
static const int x = 2.1;   //静态常量整型成员变量
static const int xx;        //静态常量整型成员变量声明
static const double z;  //静态常量非整型成员变量声明
static const float zz = 6.6;    //静态常量非整型成员变量</code></pre><p>};</p>
<p>const int Test::xx = 4; //静态常量整型成员变量定义<br>const double Test::z = 5.1; ////静态常量非整型成员变量定义<br>int Test::c = 2;</p>
<p>int main(void)<br>{<br>cout &lt;&lt; Test::x &lt;&lt; endl;</p>
<pre><code>return 0;</code></pre><p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 4. myPro</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 1. 操作符重载</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. 二进制运算符&#96;&#x3D;&#96;（赋值），&#96;[]&#96;（数组订阅），&#96;-&gt;&#96;（成员访问）以及n元&#96;()&#96;（函数调用）运算符必须始终实现为**成员函数**。</span><br><span class="line">2. 一般法则</span><br><span class="line">   - 如果它是一**元运算符**，请将其实现为**_成员*_函数。</span><br><span class="line">   - 如果二进制运算符将**两个操作数均等地**对待（使它们不变），则将该运算符实现**_为非成员*_函数。</span><br><span class="line">   - 如果二进制运算符**_不能*_平等地***对待其两个操作数（通常会更改其左操作数），则在必须访问该操作数的私有部分的情况下，使其成为其左操作数类型的**_成员*_函数可能会很有用。</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>part 3</title>
    <url>/2020/08/29/gmso4g/</url>
    <content><![CDATA[<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul>
<li>同一论域中一个元素可有多种解释</li>
<li>提高语言灵活性</li>
<li>程序设计语言<ul>
<li>一名多用 ——函数重载</li>
<li>类属  ——template</li>
<li>OO 程序设计——虚函数</li>
</ul>
</li>
</ul>
<h3 id="操作符重载"><a href="#操作符重载" class="headerlink" title="操作符重载"></a>操作符重载</h3><h4 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h4><p>名同，参数不同；</p>
<p>静态绑定（调用函数是确定的）由 compiler/linker 决定</p>
<p>歧义控制：顺序，最佳匹配（每个实参的都不差，有一个实参匹配更好）</p>
<h4 id="操作符重载-1"><a href="#操作符重载-1" class="headerlink" title="操作符重载"></a>操作符重载</h4><p>参数至少包含一个用户自定义类型 (new、delete 除外）</p>
<ul>
<li>动机<ul>
<li>built_in 类型  compiler</li>
<li>自定义数据类型 程序员</li>
</ul>
</li>
<li>作用</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span></span></span><br><span class="line"><span class="class">&#123;</span>      <span class="keyword">double</span> real, imag;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">       Complex() &#123; real = <span class="number">0</span>; imag = <span class="number">0</span>; &#125;</span><br><span class="line">       Complex(<span class="keyword">double</span> r, <span class="keyword">double</span> i) &#123; real = r; imag = i; &#125;</span><br><span class="line"> 	   Complex <span class="keyword">operator</span> + (Complex&amp; x)&#123;</span><br><span class="line">         Complex temp;</span><br><span class="line">	     temp.real = real+x.real;</span><br><span class="line">	     temp.imag = imag+x.imag;</span><br><span class="line">	     <span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">       <span class="function">Complex <span class="title">add</span><span class="params">(Complex&amp; x)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">Complex   a(1,2),b(3,4), c;</span><br><span class="line">c = a.add(b);<span class="comment">//期望写成c=a+b</span></span><br><span class="line">c=a+b;<span class="comment">//c=a.operator +(b);类似于函数重载</span></span><br></pre></td></tr></table></figure>

<p>输出操作符重载</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Day &#123; SUN, MON, TUE, WED, THU, FRI, SAT&#125;;</span><br><span class="line">Day&amp; <span class="keyword">operator</span>++(Day&amp; d)</span><br><span class="line">&#123;  <span class="keyword">return</span> d= (d==SAT)? SUN: Day(d+<span class="number">1</span>); &#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; o, Day&amp; d)</span><br><span class="line">&#123;	<span class="keyword">switch</span> (d)</span><br><span class="line">	&#123;	<span class="keyword">case</span> SUN: o &lt;&lt; <span class="string">"SUN"</span> &lt;&lt; <span class="built_in">endl</span>;<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> MON: o &lt;&lt; <span class="string">"MON"</span> &lt;&lt; <span class="built_in">endl</span>;<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> TUE: o &lt;&lt; <span class="string">"TUE"</span> &lt;&lt; <span class="built_in">endl</span>;<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> WED: o &lt;&lt; <span class="string">"WED"</span> &lt;&lt; <span class="built_in">endl</span>;<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> THU: o &lt;&lt; <span class="string">"THU"</span> &lt;&lt; <span class="built_in">endl</span>;<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> FRI: o &lt;&lt; <span class="string">"FRI"</span> &lt;&lt; <span class="built_in">endl</span>;<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> SAT: o &lt;&lt; <span class="string">"SAT"</span> &lt;&lt; <span class="built_in">endl</span>;<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> o;</span><br><span class="line">&#125;<span class="comment">//返回是ostream原因是要链式调用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;      Day d=SAT;</span><br><span class="line">       ++d;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不可重载的操作符 .（成员访问运算符）  .*（成员指针访问运算符） :: （域操作符）?:（条件运算符）</p>
<p>.、.*运算符不能重载是为了保证访问成员的功能不能被改变，域运算符合 sizeof 运算符的运算对象是类型而不是变量或一般表达式，不具备重载的特征。</p>
<p>重载原则</p>
<ul>
<li>方式<ul>
<li>类成员函数</li>
<li>带有类参数的全局函数</li>
</ul>
</li>
<li>遵循原有语法</li>
</ul>
<p>单目/双目</p>
<p>优先级</p>
<p>结合性</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span>    <span class="keyword">int</span> x;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      A(<span class="keyword">int</span> i):x(i)&#123;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; … &#125;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123; … &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> <span class="keyword">void</span> (A::*p_f)() ;<span class="comment">//函数指针</span></span><br><span class="line"></span><br><span class="line">  p_f= &amp;A::f;</span><br><span class="line"> (a.*p_f)();</span><br></pre></td></tr></table></figure>

<h4 id="双目操作符重载"><a href="#双目操作符重载" class="headerlink" title="双目操作符重载"></a>双目操作符重载</h4><ol>
<li>类成员函数</li>
</ol>
<p>格式</p>
<p><ret type> operator_ _# (<arg>)</p>
<p><em>this</em>   隐含</p>
<p>使用</p>
<p>&lt; class name&gt; a, b;</p>
<p><em>a # b ;</em></p>
<p><em>a.operator#(b) ;</em></p>
<ol start="2">
<li>全局函数</li>
</ol>
<p>友元</p>
<p><em>friend _<ret type></em> operator_ <em>#</em> <em>(<arg>,<arg>)</em></p>
<p>格式</p>
<p><ret type> <em>operator</em> <em>#</em> <em>(<arg>,<arg>)</em></p>
<p>限制</p>
<p><em>=  ()  []</em> -&gt;不能作为全局函数重载</p>
<p>当类中没有定义赋值运算符重载成员函数时,当程序执行到某一赋值语句时，程序就会调用与赋值语句中右值类型匹配的构造函数，而把这右值当作此构造函数的实参。有重载赋值操作符时，执行赋值语句时，程序就只会去调用相应的赋值运算符重载函数</p>
<p>=：1、因为它认为类中并没有重载赋值运算符的成员函数，所以它根据 C++的规则，会去调用相应的构造函数。<br>2、但是在全局里，我们已经重载了参数类型为此类类型的赋值运算符函数，而这赋值语句刚好和这函数匹配上了，根据 C++的规则，也会去调用这函数。<br>其他的操作符同理。</p>
<ol start="3">
<li>全局函数作为补充</li>
</ol>
<p>obj+10 与 10+obj 成员函数不能同时支持（第一个参数是成员函数）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CL</span></span></span><br><span class="line"><span class="class">&#123;</span>     <span class="keyword">int</span> count;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">       <span class="keyword">friend</span> CL <span class="keyword">operator</span> +(<span class="keyword">int</span> i, CL&amp; a);</span><br><span class="line">      <span class="keyword">friend</span> CL <span class="keyword">operator</span> +(CL&amp; a, <span class="keyword">int</span> i);</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure>

<p>单目运算符最好重载为类成员函数</p>
<p>双面运算符最好重载为类友元函数</p>
<h4 id="永远不要重载-amp-amp"><a href="#永远不要重载-amp-amp" class="headerlink" title="永远不要重载&amp;&amp; ||"></a>永远不要重载&amp;&amp; ||</h4><p>短路现象</p>
<p><em>if ((p != 0) &amp;&amp; (strlen(p) &gt;10))</em></p>
<p>重载前，编译器判断 p!=0 如果 p==0，则不会检测后半部分</p>
<p>重载后，编译器会函数调用，不会有短路现象</p>
<h4 id="单目操作符"><a href="#单目操作符" class="headerlink" title="单目操作符"></a>单目操作符</h4><p>如：++</p>
<p>类函数：<ret type> operator #()</p>
<p>全局函数：<ret type> operator #(<arg>)<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598060645825-abc25c8a-deb2-4d7c-aea3-f69e54533954.png#align=left&display=inline&height=482&margin=%5Bobject%20Object%5D&name=image.png&originHeight=964&originWidth=1126&size=136601&status=done&style=none&width=563" alt="image.png"></p>
<h4 id="特殊操作符重载"><a href="#特殊操作符重载" class="headerlink" title="特殊操作符重载"></a>特殊操作符重载</h4><h5 id="重载-new"><a href="#重载-new" class="headerlink" title="重载 new"></a>重载 new</h5><p>定位 new</p>
<p>new 重载可以带其他参数</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598021045311-057360f1-67cc-4e59-96b6-b9f38624150c.png#align=left&display=inline&height=331&margin=%5Bobject%20Object%5D&originHeight=331&originWidth=630&status=done&style=none&width=630" alt=""></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="keyword">sizeof</span>(A)];</span><br><span class="line">A *a=<span class="keyword">new</span> (buf)A;<span class="comment">//A的对象分配到buf所指的地址空间上</span></span><br></pre></td></tr></table></figure>

<h5 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h5><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598021045483-e1985ac2-4098-40c9-9f44-a7fea8239f68.png#align=left&display=inline&height=426&margin=%5Bobject%20Object%5D&originHeight=426&originWidth=803&status=done&style=none&width=803" alt=""></p>
<p>定义了 new 后需要定义对应的 delete</p>
<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><ol>
<li>源代码复用机制</li>
<li>参数化模板</li>
<li>多态一种形式</li>
</ol>
<h4 id="类属函数"><a href="#类属函数" class="headerlink" title="类属函数"></a>类属函数</h4><p>同一个函数对不同类型的数据完成相同的操作</p>
<ol>
<li>宏实现： #define max(a,b) ((a)&gt;(b)?(a):(b)).缺陷 只能实现简单的功能，没有类型检查</li>
<li>函数重载：缺陷需要定义的重载函数太多，定义不全</li>
<li>函数指针： void sort(void<em>,unsigned int ,unsigned int,int(*cmp)(void</em>,void*))缺陷 需要定义额外参数，大量指针运算，实现复杂，可读性差</li>
<li>函数模板：<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598021045432-26b05e0f-9c84-4b20-b143-c29105b161b8.png#align=left&display=inline&height=310&margin=%5Bobject%20Object%5D&originHeight=310&originWidth=519&status=done&style=none&width=519" alt=""></li>
</ol>
<p>Template :C98 之前(与类 class 含义不同)</p>
<p>Template 本身不被编译进去</p>
<p>模板支持内置类型（int) 也支持自定义类型，此时需要重载操作符</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598021045622-cea53cdb-bb1c-4612-b518-30793d2b13af.png#align=left&display=inline&height=529&margin=%5Bobject%20Object%5D&originHeight=529&originWidth=817&status=done&style=none&width=817" alt=""></p>
<p>显式实例化：调用的时候把尖括号里的东西显式的写出来</p>
<p>template<templateA></p>
<p>函数模板默认参数位置比较灵活（一般函数默认参数从右开始复制）</p>
<p>函数模板和函数重载配合使用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">max</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>)</span></span><br><span class="line"><span class="class">&#123;</span> <span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">…</span><br><span class="line"><span class="keyword">int</span>  x, y, z;</span><br><span class="line"><span class="keyword">double</span> l, m, n;</span><br><span class="line">z = <span class="built_in">max</span>(x,y);</span><br><span class="line">l = <span class="built_in">max</span>(m,n);</span><br><span class="line"></span><br><span class="line"><span class="built_in">max</span>(x,m);<span class="comment">//?</span></span><br><span class="line"><span class="comment">//定义一个max重载函数,编译器会优先匹配重载函数</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="类属类"><a href="#类属类" class="headerlink" title="类属类"></a>类属类</h4><p>类定义带有类型参数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span>    T <span class="built_in">buffer</span>[<span class="number">100</span>];</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T x)</span></span>;</span><br><span class="line">     <span class="function">T <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;//需要再次声明<span class="title">T</span>是类型参数</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Stack</span> &lt;T&gt;:</span>:push(T x) &#123; …  &#125;<span class="comment">//某个类型会具体实例化的stack</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">Stack</span> &lt;T&gt;:</span>:pop() &#123; … &#125;</span><br><span class="line">……</span><br><span class="line">Stack &lt;<span class="keyword">int</span>&gt; st1; <span class="comment">//显式实例化</span></span><br><span class="line">Stack &lt;<span class="keyword">double</span>&gt; st2;</span><br></pre></td></tr></table></figure>

<p>每个方法前需要再次声明 T</p>
<p>返回时也要再次声明</p>
<p>显式实例化</p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>常见的处理方法：</p>
<ul>
<li>函数参数（返回值。引用参数）</li>
<li>逐层返回</li>
</ul>
<h3 id="处理机制"><a href="#处理机制" class="headerlink" title="处理机制"></a>处理机制</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598062832280-83b72563-76e4-4d45-aaef-e1f1e9487a40.png#align=left&display=inline&height=336&margin=%5Bobject%20Object%5D&name=image.png&originHeight=672&originWidth=1290&size=99690&status=done&style=none&width=645" alt="image.png"><br>catch(…)捕获所有异常</p>
<h2 id="I-O-处理"><a href="#I-O-处理" class="headerlink" title="I/O 处理"></a>I/O 处理</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598021045489-67b6ae81-9d99-4073-82e7-fb0f32810573.png#align=left&display=inline&height=335&margin=%5Bobject%20Object%5D&originHeight=335&originWidth=564&status=done&style=none&width=564" alt=""></p>
<p>I/O 流库的三类输入/输出操作</p>
<p>控制台 I/O</p>
<p>标准 I/O 设备</p>
<p>cin、cout、cerr、clog（cin 带缓冲，cerr 不带缓冲）</p>
<p>文件 I/O</p>
<p>字符串 I/O</p>
<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><h1 id="c-的新特性"><a href="#c-的新特性" class="headerlink" title="c++的新特性"></a>c++的新特性</h1><p>R-value Reference and Move Constructor<br>Extern Templates<br>Constant Expressions<br>Lambda Function<br>Delegating Constructor<br>Uniform Initialization<br>nullptr</p>
<h2 id="右值引用"><a href="#右值引用" class="headerlink" title="右值引用"></a>右值引用</h2><p>左值和右值的区分标准在于能否获取地址。<br>左值：存储地址，绑定非常量/常量的引用。<br>右值不可以绑定非常量。（许多右值是临时变量）<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598024112224-3ee386fc-ee60-4098-926a-3ba10195db72.png#align=left&display=inline&height=258&margin=%5Bobject%20Object%5D&originHeight=258&originWidth=390&status=done&style=none&width=390" alt=""><br>右值引用 ：&amp;&amp;a</p>
<h2 id="外部模版"><a href="#外部模版" class="headerlink" title="外部模版"></a>外部模版</h2><p>多次实例化效率变低<br>避免多次实例化<br>extern template void func(int);</p>
<h2 id="常量表达式"><a href="#常量表达式" class="headerlink" title="常量表达式"></a>常量表达式</h2><p>constexpr<br>允许表达式内含有用户定义的值<br>编译器会在确定的某一时刻确定该表达式的值<br>老版本：<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598024112471-a9b5acb6-2863-4015-83d5-f9ea9b4296a1.png#align=left&display=inline&height=474&margin=%5Bobject%20Object%5D&originHeight=474&originWidth=1342&status=done&style=none&width=1342" alt=""></p>
<p>新版：<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598024112499-3efaa4db-e6c5-45a8-bcb7-99af38447166.png#align=left&display=inline&height=488&margin=%5Bobject%20Object%5D&originHeight=488&originWidth=1348&status=done&style=none&width=1348" alt=""><br>编译器会在编译时刻计算对应的值</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/jpeg/392607/1598024112464-f80b036f-45fc-4f0c-b6e2-db59534dbb66.jpeg#align=left&display=inline&height=576&margin=%5Bobject%20Object%5D&originHeight=576&originWidth=1376&status=done&style=none&width=1376" alt=""><br>对应的对象会在编译时刻确定对应的值，相当于一组常量，不需要开辟新的内存空间<br>const：只是不能修改对应的值，但是会占用其他的空间资源</p>
<h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h2><p>用来声明函数对象，并可以使用局部变量<br>sort(items.begin(), items.end(),<br>[](int a, int b) { return a &lt; b; } //Lambda Function<br>);</p>
<p>lambda 捕获<br>[]  Capture nothing<br>[&amp;] Capture any referenced variable by reference<br>[=] Capture any referenced variable by making a copy<br>[=, &amp;foo] Capture any referenced variable by making a copy, but capture variable foo by reference<br>[bar] Capture bar by making a copy; don’t copy anything else</p>
<h2 id="Delegating-Constructor-委托构造函数"><a href="#Delegating-Constructor-委托构造函数" class="headerlink" title="Delegating Constructor 委托构造函数"></a>Delegating Constructor 委托构造函数</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598024112605-6bab2243-d760-4fe2-b8f3-85f90e54fc6a.png#alt=04A81750-C068-419B-A26C-CFB40E8D08E2" alt=""></p>
<h2 id="统一初始化"><a href="#统一初始化" class="headerlink" title="统一初始化"></a>统一初始化</h2><p>接受初始化列表<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/jpeg/392607/1598024112429-4d4fd778-8fa9-42d3-b69c-c5f165635880.jpeg#alt=-w410" alt=""></p>
<h2 id="nullptr"><a href="#nullptr" class="headerlink" title="nullptr"></a>nullptr</h2><p>空指针<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598024112407-26472d94-7887-45d8-b3b2-4c6c95603deb.png#alt=F687C51E-3DB0-42A9-82C3-5C79B95670DF" alt=""><br>之前的 NULL 一般是 0</p>
]]></content>
  </entry>
  <entry>
    <title>往年试卷总结</title>
    <url>/2020/08/29/esz5cg/</url>
    <content><![CDATA[<h2 id="2003-年"><a href="#2003-年" class="headerlink" title="2003 年"></a>2003 年</h2><p>函数参数是对象时，最好传入引用<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598070604057-522f4ec9-33e6-4573-a803-6ae25edaeaa2.png#align=left&display=inline&height=509&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1018&originWidth=1890&size=339868&status=done&style=none&width=945" alt="image.png"></p>
<h2 id="2013-年"><a href="#2013-年" class="headerlink" title="2013 年"></a>2013 年</h2><h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><p>C++中的空类：<br>声明时编译器不会产生任何函数，只会生成 1byte 的占位符<br>编译器只会在需要的时候生成 6 个成员函数：一个缺省的构造函数、一个拷贝构造函数、一个析构函数、一个赋值运算符、一对取址运算符和一个 this 指针。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Empty</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Empty();</span><br><span class="line">Empty(<span class="keyword">const</span> Empty&amp;);</span><br><span class="line">~Empty();</span><br><span class="line">Empty&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Empty&amp; rhs);</span><br><span class="line">Empty* <span class="keyword">operator</span>&amp;();</span><br><span class="line"><span class="keyword">const</span> Empty* <span class="keyword">operator</span>&amp;() <span class="keyword">const</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="二"><a href="#二" class="headerlink" title="二"></a>二</h3><p>指针移动时最好重新声明一个局部变量<br>返回局部变量会造成调用的错误</p>
<h3 id="三"><a href="#三" class="headerlink" title="三"></a>三</h3><p>赋值兼容原则；<br>将基类的指针赋值给派生类时，除非是虚函数，否则皆调用基类的函数。当函数为虚函数时，若参数有默认值则采用父类的默认值<br>构造和析构函数<br>1、子类对象在创建时会首先调用父类的构造函数<br>2、父类构造函数执行结束后，执行子类的构造函数<br>3、当父类的构造函数有参数时，需要在子类的初始化列表中显示调用<br>4、析构函数调用的先后顺序与构造函数相反<br>即 先构造父类，再构造成员变量、最后构造自己<br>     先析构自己，在析构成员变量、最后析构父类<br>                            //先构造的对象，后释放<br>参照：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Object(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Object()"</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Object()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"~Object()"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> :</span> <span class="keyword">public</span> Object</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Parent(<span class="keyword">const</span> <span class="keyword">char</span>* s) : Object(s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Parent()"</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Parent()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"~Parent()"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span> <span class="keyword">public</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Object o1;</span><br><span class="line">    Object o2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Child() : o2(<span class="string">"o2"</span>), o1(<span class="string">"o1"</span>), Parent(<span class="string">"Parameter from Child!"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Child()"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Child()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"~Child()"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Child child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"demo05_extend_construct_destory.cpp"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    run05();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object() Parameter from Child!</span><br><span class="line">Parent() Parameter from Child!</span><br><span class="line">Object() o1</span><br><span class="line">Object() o2</span><br><span class="line">Child()</span><br><span class="line">~Child()</span><br><span class="line">~Object()</span><br><span class="line">~Object()</span><br><span class="line">~Parent()</span><br><span class="line">~Object()</span><br></pre></td></tr></table></figure>

<p>同名：当子类成员变量与父类成员变量同名时，子类依然从父类继承同名成员<br>在子类中通过作用域分辨符::进行同名成员区分（<strong>在派生类中使用基类的同名成员，显式地使用类名限定符</strong>）<br>同名成员存储在内存中的不同位置<br>异常继承：<br>try catch 按顺序抛出异常，若基类异常在子类异常之前则抛出基类的异常</p>
<h2 id="2019-总结"><a href="#2019-总结" class="headerlink" title="2019 总结"></a>2019 总结</h2><h3 id="函数的默认参数"><a href="#函数的默认参数" class="headerlink" title="函数的默认参数"></a>函数的默认参数</h3><p>在具有多个参数的函数中指定默认值时,默认参数都必须出现在不默认参数的右边,一旦某个参数开始指定默认值,它右边的所有参数都必须指定默认值.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i1 = <span class="number">1</span>, <span class="keyword">int</span> i2 =<span class="number">2</span>, <span class="keyword">int</span> i3 = <span class="number">3</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用函数 f()</span></span><br><span class="line">f();             <span class="comment">//正确, i1=1, i2=2, i3=3</span></span><br><span class="line">f(<span class="number">3</span>);            <span class="comment">//正确, i1=3, i2=2, i3=3</span></span><br><span class="line">f(<span class="number">2</span>, <span class="number">3</span>);         <span class="comment">//正确, i1=2, i2=3, i3=3</span></span><br><span class="line">f(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);      <span class="comment">//正确, i1=4, i2=5, i3=6</span></span><br><span class="line">f(, <span class="number">2</span>, <span class="number">3</span>);       <span class="comment">//错误, i1默认,其右边的i2和i3没有默认</span></span><br></pre></td></tr></table></figure>

<h3 id="模版与宏"><a href="#模版与宏" class="headerlink" title="模版与宏"></a>模版与宏</h3><p>1.宏是在预处理阶段处理，模板是在编译阶段处理 2.宏不会进行类型检查，只会单纯的进行文本替换，模板会进行类型检查。比如下面代码模板就会出错，而宏不会<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597652674755-e00ca635-3c27-4020-963a-1d5df105ed82.png#align=left&display=inline&height=204&margin=%5Bobject%20Object%5D&originHeight=204&originWidth=201&size=0&status=done&style=none&width=201" alt=""> 3.宏直接就可以产生代码，而编译器遇到模板定义时，并不产生代码，只有当模板实例化后时才会产生代码。</p>
<h2 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h2><p>指针的输出<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597221256791-c3453b5b-3369-4661-83af-c364a053ca2a.png#align=left&display=inline&height=354&margin=%5Bobject%20Object%5D&originHeight=354&originWidth=682&status=done&style=none&width=682" alt=""></p>
<p>取消常量属性<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597996641582-780e9713-6126-46af-857d-f14e852f01b8.png#align=left&display=inline&height=207&margin=%5Bobject%20Object%5D&name=image.png&originHeight=414&originWidth=1982&size=165666&status=done&style=none&width=991" alt="image.png"></p>
<p>不能间接改变常量<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597997163696-bbaa065e-71aa-478c-8a46-7d851e541398.png#align=left&display=inline&height=223&margin=%5Bobject%20Object%5D&name=image.png&originHeight=446&originWidth=968&size=43689&status=done&style=none&width=484" alt="image.png"></p>
]]></content>
  </entry>
  <entry>
    <title>part 1 结构化编程</title>
    <url>/2020/08/29/ripes8/</url>
    <content><![CDATA[<h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><ol>
<li>三要素：syntax（语法），semantic（语义），pragmatics（语用）</li>
<li>Backus–Naur Form：形式化语言描述程序语言<br>EBNF<br>::- _ _<br>A ::- a|b<br>D ::-0|1<br>定义无限集合 A::- aA|bA|A<br>A D 代表一个系列或者一个集合<br>判定：reduce/deduct</li>
<li>Avram Noam Chomsky   认为自然语言可以严格表示<br>G=（VN，VT，R，Z）<br>语言可以分成四类：RG，CFG，CSG，PSG<br>对应识别模型：FA(finite automata) ,PDA(pushdown),LBA (linear bounded),TM(turing machine)<br>对特例：ad hoc</li>
<li>语言的定义：特定的字母表上，按照语法，字符串组成的集合</li>
<li>语义;static dynamic<br>表示：操作语义、指称语义、公理语义</li>
</ol>
<h2 id="programming"><a href="#programming" class="headerlink" title="programming"></a>programming</h2><p>David Gries 认为科学对待编程——&gt;calculus { Q } S { R }<br>Donald Ervin Knuth 认为程序是艺术</p>
<h2 id="programming-paradigm-编程范式"><a href="#programming-paradigm-编程范式" class="headerlink" title="programming paradigm 编程范式"></a>programming paradigm 编程范式</h2><p>imperative programming：命令式</p>
<ol>
<li>过程</li>
<li>面向对象<br>declarative programming</li>
<li>functional：无副作用</li>
<li>logical<br>函数的副作用：改变环境的某些参数（函数调用与顺序有关）</li>
</ol>
<h2 id="c-的诞生"><a href="#c-的诞生" class="headerlink" title="c++的诞生"></a>c++的诞生</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597977929499-e3b5c9a4-6ce1-4cef-9f61-a10ac19cf2e7.png#align=left&display=inline&height=577&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1154&originWidth=1652&size=1508523&status=done&style=none&width=826" alt="image.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/jpeg/392607/1597663643348-b2536333-2e52-4879-a355-66bfe2152ad2.jpeg#align=left&display=inline&height=730&margin=%5Bobject%20Object%5D&originHeight=730&originWidth=1246&status=done&style=none&width=1246" alt=""><br>来源一：<br>fortran：科学的语言描述<br>algol60: 程序设计作为单独的学科<br>algol68:程序的标杆<br>这三者是对结构化编程的支持</p>
<p>来源二<br>BCPL/C：对系统软件的支持，可以直接触碰硬件，（不叫 D，叫 C++ 完全包含 c，并未淘汰 C 中不好的东西）</p>
<p>来源三：<br>simula67: class inherit 封装与继承。提到了虚函数（未从程序设计角度设计该语言 runtime 很慢，使用人较少）第一个有 OO 特征的语言</p>
<p>来源四：<br>CLu，Ada：源代码级别，更高层次的抽象<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/jpeg/392607/1597663643321-63aa84c9-12f9-41f3-823d-dd9948cf0795.jpeg#align=left&display=inline&height=310&margin=%5Bobject%20Object%5D&originHeight=310&originWidth=324&status=done&style=none&width=324" alt=""></p>
<p>C++诞生：</p>
<ol>
<li>1979:博士论文，simula 性能太差（linker 连接器出现问题），BCPLdebug 难。愿望：带有 simula 的 algol68 以 C 为基础实现。哲学观：实用主义，文学观：存在主义</li>
<li>带类的 C。工具：Cpre（预编译为 C）</li>
<li>linker 分别编译（编译一致性）类型安全</li>
<li>1983:用户 产业界+大学；运行环境： 硬件+OS。 cfront<img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/jpeg/392607/1597663643402-60c4749c-bbde-4d66-a886-3d062bf419f9.jpeg#align=left&display=inline&height=488&margin=%5Bobject%20Object%5D&originHeight=976&originWidth=496&status=done&style=none&width=248" alt=""><br>预处理：编辑（edit）对 define 一些进行编辑。cpre：把 C++程序翻译成 c 程序给 Ccomlpier 发现语法错误，不懂 C 的语法。Cfront 懂 C 语法。</li>
</ol>
<p>区分初始化和赋值</p>
<p>c 和 c++ 的关系：超集。c 艹支持 c 所支持的全部编程技巧。任何 c 程序都能被 c 艹用基本相同的方法编写，并具备同等开销（时间、空间）</p>
<h2 id="结构化程序设计部分"><a href="#结构化程序设计部分" class="headerlink" title="结构化程序设计部分"></a>结构化程序设计部分</h2><p>地址：</p>
<table>
<thead>
<tr>
<th>code</th>
</tr>
</thead>
<tbody><tr>
<td>global data   全程存在</td>
</tr>
<tr>
<td>stack   编译器决定 function 局部存在</td>
</tr>
<tr>
<td>heap   动态的，由程序员决定</td>
</tr>
</tbody></table>
<p>管理地址：指针</p>
<p>类型——》决定数据的行为</p>
<p>强/弱，静/动</p>
<p>c++属于强类型，动静结合。但允许程序员打破强类型</p>
<h2 id="data"><a href="#data" class="headerlink" title="data"></a>data</h2><p>名、值、地址、类型、性质</p>
<p>处理：算数、逻辑、I/O</p>
<p>四种基本类型：int char float double(built-in)</p>
<p>typedef：为已有的类型取别名，</p>
<h2 id="expression"><a href="#expression" class="headerlink" title="expression"></a>expression</h2><p>data type</p>
<p>类型转换方式：coersion（隐式，casting（显式</p>
<p>求值次序：<em>d + x/y</em>d + ++y*。副作用：overflow</p>
<p>exception</p>
<p>操作符重载（多态）</p>
<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>表达式语句</p>
<p>IO 语句</p>
<p>控制流语句<br>framework</p>
<h3 id="switch-优化："><a href="#switch-优化：" class="headerlink" title="switch 优化："></a>switch 优化：</h3><p>用枚举类型 enum 代替字面常量</p>
<p>I18N</p>
<p><strong>表驱动</strong>：空间开销代替时间开销</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><table>
<thead>
<tr>
<th>code</th>
</tr>
</thead>
<tbody><tr>
<td>data</td>
</tr>
<tr>
<td>stack</td>
</tr>
<tr>
<td>heap</td>
</tr>
</tbody></table>
<p>stack 与 data 区域区别：后者是全生命周期，前者利用代码的局部性，可以重复使用</p>
<p>是浮动的，生命周期是由编译器决定的</p>
<p>因为 stack 是重复使用，需要进行管理</p>
<p>heap：动态数据，生命周期是由程序员决定的。（free 归还）</p>
<h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><p>定义不允许嵌套，先定义后使用</p>
<p>执行机制：建立被调用函数的占空间，参数传递，保存调用函数的运行状态，将控制转交给被调函数</p>
<p>stack 生长方向：高地址向低地址</p>
<p>ebp：栈底指针（当前函数）</p>
<p>esp：栈顶指针</p>
<h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><p>值传递 value</p>
<p>cost：传输内容，指令地址（eip）栈顶和栈底 0</p>
<p>引用传递 reference</p>
<p>总结：</p>
<ol>
<li>push arguments</li>
<li>save context:save return address, save caller’s base pointer</li>
<li>execute function:set new base pointer,allocate space, carry out some tasks,release space</li>
<li>recover context</li>
<li>continue to execute caller function</li>
</ol>
<p>call by name :delayed evaluation</p>
<p>前提：函数无副作用。</p>
<p>call by value result</p>
<h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>名同参数不同</p>
<p>c 不支持，c++支持</p>
<h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>void f(int,int=2);</p>
<p>默认参数用在声明。默认参数顺序：右到左。</p>
<h3 id="inline-内联函数"><a href="#inline-内联函数" class="headerlink" title="inline 内联函数"></a>inline 内联函数</h3><p>不产生函数调用，减少开销，增强可读性</p>
<p>实现方法：编译系统将为 inline 创建一段代码，在调用点，做替换。</p>
<p>不能实现递归</p>
<p><strong>适用</strong>：使用频率高，简单，小段代码。如构造函数</p>
<p><strong>限制：非递归</strong></p>
<p>仅是对编译器的建议，并不是说声明了内联就会内联，声明内联只是一个建议而已。</p>
<p><strong>定义</strong>在类中的<strong>成员函数</strong>默认都是<strong>内联的</strong>，如果在类定义时就在类内给出函数定义，那当然最好。如果在类中未给出成员函数定义，而又想内联该函数的话，那在类外要加上  <strong>inline</strong>，否则就认为不是内联的。</p>
<p>inline 是一种”<strong>用于实现的关键字</strong>“，而不是一种”用于声明的关键字”。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foo</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Foo</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;&#125; <span class="comment">// inline 与函数定义体放在一起</span></span><br></pre></td></tr></table></figure>

<p>强行使用 inline 的缺点：</p>
<ol>
<li>增大目标代码（1000+20，inline：1000*20）</li>
<li>病态换页——抖动（trash）</li>
<li>降低指令 cache 的命中率</li>
</ol>
<p>被 cc 拒绝的类型：长且复杂如 loop，swtich/指针</p>
<h2 id="程序组织"><a href="#程序组织" class="headerlink" title="程序组织"></a>程序组织</h2><p>程序结构：逻辑结构，物理结构</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597221256777-ff68a974-a3de-414d-8fbe-83a3aa827b6c.png#align=left&display=inline&height=518&margin=%5Bobject%20Object%5D&originHeight=518&originWidth=499&status=done&style=none&width=499" alt=""></p>
<p>lib 文件：obj 文件的组合<br>头文件：常量的定义，变量/函数声明，类型定义，内联函数，编译预处理</p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>程序级(Code,data 全生命周期)，文件级（全生命周期），函数级(stack），块级（stack）。</p>
<p>引用外部文件：extern 修饰</p>
<p>协同——》头文件</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597221256792-8861b183-a1eb-44f2-8960-3bd00fbe3138.png#align=left&display=inline&height=471&margin=%5Bobject%20Object%5D&originHeight=471&originWidth=686&status=done&style=none&width=686" alt=""></p>
<p>对外不可见：static：程序级——》文件级</p>
<p>特殊：静态局部变量仍然在 stack（全生命周期）。<br>main：全生命周期，但是又在 stack（在栈底部）</p>
<p>常量：默认文件级</p>
<p><strong>总结</strong>：接口放在头文件中，不想对外使用用 static 修饰，常量通常提出一个头文件（const.h)</p>
<p>头文件：常量定义、变量/函数声明、编一预处理、类型定义，<strong>内联函数</strong></p>
<p>inline 基于源代码的复用，即将其完整写入头文件。</p>
<p>（基于目标代码的复用，只需看到接口）</p>
<p>如果 inline 被拒绝后，cc 将其变为 static（局部于文件作用域），否则同一份代码存在不同文件，造成代码冗余</p>
<h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><p>有限的作用域更加灵活的运用</p>
<p>理念</p>
<ol>
<li>兼容：防冲突；遇冲突，可选择，易扩展</li>
</ol>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597221259730-d3a2a910-8682-46fe-8ef4-94bbe516fc31.png#align=left&display=inline&height=220&margin=%5Bobject%20Object%5D&originHeight=220&originWidth=475&status=done&style=none&width=475" alt=""></p>
<ol start="2">
<li>快速</li>
</ol>
<p>两种形式：</p>
<p>declaration</p>
<p>directive</p>
<p>namespace 中的变量 和全局变量命名相同时会报错</p>
<h2 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h2><h3 id="编译预处理（不懂-c-语法）"><a href="#编译预处理（不懂-c-语法）" class="headerlink" title="编译预处理（不懂 c++语法）"></a>编译预处理（不懂 c++语法）</h3><p>潜伏于环境：保持 cpp 不变，改变源程序语义</p>
<p>穿透作用域</p>
<h4 id="类型："><a href="#类型：" class="headerlink" title="类型："></a>类型：</h4><ol>
<li>include： compose source text</li>
<li>define：</li>
</ol>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597221256692-921e2e82-5db9-4731-83d1-771c023fecc6.png#align=left&display=inline&height=299&margin=%5Bobject%20Object%5D&originHeight=299&originWidth=457&status=done&style=none&width=457" alt=""></p>
<p>只是替换，无类型检查</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mul(a,b) a*b</span></span><br><span class="line"><span class="keyword">int</span> x= mul(<span class="number">1</span>+<span class="number">2</span>,<span class="number">2</span>+<span class="number">3</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;x;<span class="comment">//8 not 15</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>indef</li>
<li>pragma</li>
</ol>
<p><strong>预处理指令</strong></p>
<blockquote>
<ol>
<li>#空指令，无任何效果</li>
<li>#include 包含一个源代码文件</li>
<li>#define 定义宏</li>
<li>#undef 取消已定义的宏</li>
<li>#if 如果给定条件为真，则编译下面代码</li>
<li>#ifdef 如果宏已经定义，则编译下面代码</li>
<li>#ifndef 如果宏没有定义，则编译下面代码</li>
<li>#elif 如果前面的#if 给定条件不为真，当前条件为真，则编译下面代码</li>
<li>#endif 结束一个#if……#else 条件编译块</li>
<li>#error 停止编译并显示错误信息</li>
</ol>
</blockquote>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>c++允许数组越界</p>
<p>函数接口：void f(int a[],int n);//元素的个数需要参数显示的给出，不能通过 sizeof 获得</p>
<p>对于 char a[]=”abc”;char b[]={‘a’,’b’,’c’}; 前者可以用 cout，后者不行（无’\0’)</p>
<p>多维数组：降维处理</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597992968319-edbd867b-dc1e-4edd-8206-4932d4c1fc66.png#align=left&display=inline&height=466&margin=%5Bobject%20Object%5D&name=image.png&originHeight=932&originWidth=1288&size=271228&status=done&style=none&width=644" alt="image.png"></p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>char s1=”abc”;等同于{‘a’,‘b’,‘c,’\0‘}</p>
<p>char s2={‘a’,‘b’,‘c}</p>
<p>烫出现原因：0xCCCC。vs 默认填充，为了容易发现错误</p>
<h3 id="struct-结构"><a href="#struct-结构" class="headerlink" title="struct 结构"></a>struct 结构</h3><p>和 class 区别：class 默认私有，struct 默认公开</p>
<p>alignment：以提高访问效率</p>
<p>sizeof 不一定是数据大小之和，默认对齐大小为 4</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    short c;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; <span class="keyword">sizeof</span>(B);<span class="comment">//12</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>共享存储空间</p>
<p>不同名称分配同一地址</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597221256748-b4b7c8aa-e0c2-45f2-b7bc-be549ef1297b.png#align=left&display=inline&height=253&margin=%5Bobject%20Object%5D&originHeight=253&originWidth=378&status=done&style=none&width=378" alt=""></p>
<p>公共的属性要在公共的部分</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> c&#123;</span><br><span class="line">    <span class="keyword">char</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    short z;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="keyword">sizeof</span>(c);<span class="comment">//4</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597995250098-a42e9602-2791-425b-93f9-10d3b0a56038.png#align=left&display=inline&height=444&margin=%5Bobject%20Object%5D&name=image.png&originHeight=888&originWidth=1326&size=114437&status=done&style=none&width=663" alt="image.png"><br>FIGURE_TYPE 用于判断图形类别相当于标识</p>
<p>添加其他属性<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597995326962-954b78d3-ab91-465d-a6e1-eeb6c44bf2cf.png#align=left&display=inline&height=525&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1050&originWidth=1604&size=186089&status=done&style=none&width=802" alt="image.png"></p>
<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>主要作用：管理地址信息。管理数据，调用代码</p>
<h4 id="定义与基本操作"><a href="#定义与基本操作" class="headerlink" title="定义与基本操作"></a>定义与基本操作</h4><p>单纯的管理地址：void*可以做公共接口，任何操作必须强制类型转换</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> *p=&amp;a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> *p1=p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> *q=p;</span><br><span class="line">*((<span class="keyword">int</span>*) q)</span><br></pre></td></tr></table></figure>

<p>p1 的赋值是错误的不安全。但是 q 可以，但是无法对地址对应的值进行直接操作</p>
<h6 id="pointer-literal"><a href="#pointer-literal" class="headerlink" title="pointer literal"></a>pointer literal</h6><p>nullptr：初始化不知道指针所指地址时，保证指针处于安全位置</p>
<p>c:#define NULL ((void*)0)</p>
<pre><code>可能造成问题：其他类型指针再次赋值void*，导致不同类型指针的赋值</code></pre><p>c++：#define NULL 0</p>
<pre><code>        int *p=NULL；

可能造成问题：函数重载如：func(int); func(char*);那么func(NULL)会调用第一个</code></pre><p>c++17:nullptr</p>
<p>加减数字：单位（sizeof（数据类型））</p>
<p>同类型相减：偏移量</p>
<p>输出：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597221256791-c3453b5b-3369-4661-83af-c364a053ca2a.png#align=left&display=inline&height=354&margin=%5Bobject%20Object%5D&originHeight=354&originWidth=682&status=done&style=none&width=682" alt=""></p>
<p>特例原因：cout 实现机制</p>
<p>ostream&amp;operator&lt;&lt;(osteam&amp;,char*)</p>
<h5 id="void"><a href="#void" class="headerlink" title="void*"></a>void*</h5><p>只能管理信息。除了赋值操作，必须做强制转换</p>
<p>例：将某块内存清零—&gt;把内存中的每一个 byte 设为 0</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">memset</span><span class="params">(<span class="keyword">void</span>*pointer,<span class="keyword">unsigned</span> <span class="built_in">size</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>*p=(<span class="keyword">char</span>*)pointer;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="built_in">size</span>;k++)</span><br><span class="line">        *p++=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    ....</span><br><span class="line">&#125;a;</span><br><span class="line"><span class="keyword">int</span> B[<span class="number">100</span>]</span><br><span class="line"><span class="built_in">memset</span>(&amp;a,<span class="keyword">sizeof</span>(A));</span><br><span class="line"><span class="built_in">memset</span>(&amp;B,<span class="keyword">sizeof</span>(B))</span><br></pre></td></tr></table></figure>

<h5 id="常量指针-const-TYPE-NAME"><a href="#常量指针-const-TYPE-NAME" class="headerlink" title="常量指针 const TYPE *NAME"></a>常量指针 const TYPE *NAME</h5><p>常量指针不可赋值 只读不写</p>
<p>const 变量只能用常量指针获取地址（不能间接改变常量）</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597221256690-ebf8998d-a63f-4e28-a88a-3c3ec5557147.png#align=left&display=inline&height=283&margin=%5Bobject%20Object%5D&originHeight=283&originWidth=429&status=done&style=none&width=429" alt=""></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line">*cp=<span class="number">1</span>;<span class="comment">//错误</span></span><br><span class="line">*p=<span class="number">2</span>;<span class="comment">//正确</span></span><br><span class="line"><span class="keyword">int</span> y=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> x=<span class="number">2</span>;</span><br><span class="line">cp=&amp;y;<span class="comment">//正确</span></span><br><span class="line">q=&amp;x;<span class="comment">//错误，不能间接地改变常量 q=const_cast&lt;int*&gt;(&amp;x)</span></span><br></pre></td></tr></table></figure>

<p>改变读写权限/保护变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>*p)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> c=<span class="number">8</span>;</span><br><span class="line"><span class="built_in">print</span>(&amp;c);<span class="comment">//不可用</span></span><br></pre></td></tr></table></figure>

<p>const_cast&lt;int*&gt;取消常量属性</p>
<h5 id="指针常量"><a href="#指针常量" class="headerlink" title="指针常量"></a>指针常量</h5><p>只能在定义时初始化。<br>int*const p=&x;</p>
<p>不可移动的指针，但是可以管理内存</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">int</span> *<span class="keyword">const</span> p=&amp;x;</span><br><span class="line"></span><br><span class="line">p=&amp;y;<span class="comment">//错误，p不能移动；</span></span><br><span class="line">*p=<span class="number">1</span>;<span class="comment">//正确，可以改变内存的值,x会变</span></span><br></pre></td></tr></table></figure>

<p>const int*const p//初始化值和所指内容都不能改变</p>
<h5 id="指针与函数"><a href="#指针与函数" class="headerlink" title="指针与函数"></a>指针与函数</h5><p>&lt;&gt;()()</p>
<p>类型 （*函数名） （类型，类型，….)</p>
<p>函数指针和表驱动</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597998896529-520f1347-ac08-41a4-b418-62c158211726.png#align=left&display=inline&height=463&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1278&originWidth=1698&size=269513&status=done&style=none&width=615" alt="image.png"></p>
<h5 id="指针与数组："><a href="#指针与数组：" class="headerlink" title="指针与数组："></a>指针与数组：</h5><p>数组名实际是地址（int*const)常量地址长度</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597999254696-4d455e67-ceda-4340-91e9-ddaab1a3dda4.png#align=left&display=inline&height=522&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1044&originWidth=1742&size=315545&status=done&style=none&width=871" alt="image.png"><br>指针数组：</p>
<p>char*s1[]={“c++”,”java”,”python”}（存的是引用）</p>
<p>char *s2[][8]={“c++”,”java”,”python”}(存的是字符）</p>
<p>main 函数：</p>
<p>int main(int agrc, char*<em>argv[],char</em> env[])</p>
<p>argc：参数个数</p>
<p>argv：命令行参数</p>
<p>env：环境参数</p>
<p>可变参数：</p>
<p>int printf(const char*,…)</p>
<h5 id="多级指针"><a href="#多级指针" class="headerlink" title="多级指针"></a>多级指针</h5><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597999940520-31b5e962-a193-4b67-af69-5cced1130d7c.png#align=left&display=inline&height=407&margin=%5Bobject%20Object%5D&name=image.png&originHeight=814&originWidth=1520&size=136785&status=done&style=none&width=760" alt="image.png"></p>
<h3 id="动态变量"><a href="#动态变量" class="headerlink" title="动态变量"></a>动态变量</h3><p>stack(生存规律可知)</p>
<p>heap 生命周期由程序决定</p>
<p>非编译时刻确定，存在 heap</p>
<h4 id="申请与归还"><a href="#申请与归还" class="headerlink" title="申请与归还"></a>申请与归还</h4><p>new&lt;类型&gt;</p>
<p>int  *p=new int;</p>
<p>int &amp;a=*p;(引用)</p>
<p>delete p;(归还)</p>
<p>或者是，</p>
<p>int<em>p=(int</em>) malloc(sizeof(int))</p>
<p>free(p);</p>
<p>申请一组：</p>
<p>new &lt;类型&gt;[整型数组]</p>
<p>int *p=new int[16]</p>
<p>int<em>p=(int</em>) malloc(sizeof(int)*16)</p>
<p>多维数组的申请</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> i5arr[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    i5arr *p=<span class="keyword">new</span> i5arr[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者是</span></span><br><span class="line"><span class="keyword">int</span> *p=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> (*q)[<span class="number">5</span>]=(<span class="keyword">int</span>(*)[<span class="number">5</span>])p;</span><br></pre></td></tr></table></figure>

<p>由于申请内存可能申请不到，因此需要判断是否有效，做异常处理</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (p!=null)</span><br><span class="line">    <span class="comment">//.....</span></span><br></pre></td></tr></table></figure>

<p>delete /delete[]：面向对象编程时，前者只会调用数组第一个的析构函数，后者会逐个调用每个对象的析构函数</p>
<p>free：只归还空间不调用析构函数</p>
<p>内存分配时，系统会自动创建一个 cookie，其包含了分配大小</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">    *(p++)=<span class="number">128</span>;</span><br><span class="line"><span class="keyword">delete</span>[]p;</span><br><span class="line"><span class="comment">//这样会导致系统free128个单位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//因此,不能移动申请指针</span></span><br><span class="line"><span class="keyword">int</span> *p=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">int</span> *q=p;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">    *(q++)=<span class="number">128</span>;</span><br><span class="line"><span class="keyword">delete</span>[]p;</span><br></pre></td></tr></table></figure>

<h4 id="new-和-malloc-差别"><a href="#new-和-malloc-差别" class="headerlink" title="new 和 malloc 差别"></a>new 和 malloc 差别</h4><p>语法上 malloc 需要强制类型转换</p>
<p>语义上 面向对象编程时，new 会自动调用构造函数</p>
<h4 id="应用——链表"><a href="#应用——链表" class="headerlink" title="应用——链表"></a>应用——链表</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NODE</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> content;</span><br><span class="line">    NODE*next;</span><br><span class="line">&#125;;</span><br><span class="line">NODE*head=<span class="literal">NULL</span>:</span><br></pre></td></tr></table></figure>

<p>Insert</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">NODE*p=<span class="keyword">new</span> NODE;</span><br><span class="line">p-&gt;content=_value;</span><br><span class="line">p-&gt;next=null;</span><br><span class="line"><span class="comment">//头部插入</span></span><br><span class="line">p-&gt;next=head;</span><br><span class="line">head=p;</span><br><span class="line"><span class="comment">//尾部插入</span></span><br><span class="line">NODE*q=head;</span><br><span class="line"><span class="keyword">while</span>(q-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">    q=q-&gt;next;</span><br><span class="line">q-&gt;next=p;</span><br><span class="line"><span class="comment">//中间结点后插入</span></span><br><span class="line">NODE*q=head;</span><br><span class="line"><span class="keyword">while</span>(q-&gt;next!=<span class="literal">NULL</span>&amp;&amp;q-&gt;content!=a)</span><br><span class="line">    q=q-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(q!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    p-&gt;next=q-&gt;next;</span><br><span class="line">    q-&gt;next=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"NOT FOUND"</span>;</span><br><span class="line"><span class="comment">//中间结点前插入（双指针）</span></span><br><span class="line">NODE *q1=<span class="literal">NULL</span>, *q2=head;</span><br><span class="line"><span class="keyword">while</span> (q2 !=<span class="literal">NULL</span>  &amp;&amp; q2-&gt;content != a)&#123;</span><br><span class="line">    q1 = q2;</span><br><span class="line">    q2 = q2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(q2  != <span class="literal">NULL</span>) 	<span class="comment">//存在a</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>  (<span class="literal">NULL</span> == q1) 	<span class="comment">// a是第一个结点</span></span><br><span class="line">       &#123;   p-&gt;next = q2; head = p;   &#125;</span><br><span class="line">    <span class="keyword">else</span>  	<span class="comment">// a不是第一个结点</span></span><br><span class="line">      &#123;    p-&gt;next = q2;    q1-&gt;next = p;  &#125;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">else</span>    <span class="comment">//不存在ai</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Not found!"</span>;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597221256771-75c3ba7c-66ce-4c0e-9e2c-47f1626ee278.png#align=left&display=inline&height=444&margin=%5Bobject%20Object%5D&originHeight=444&originWidth=782&status=done&style=none&width=782" alt=""></p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>为一块已有的内存空间取别名</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597221259627-7be42acf-3d37-47c2-bb0f-52ea9cac25e8.png#align=left&display=inline&height=324&margin=%5Bobject%20Object%5D&originHeight=324&originWidth=418&status=done&style=none&width=418" alt=""><br>不能返回局部变量</p>
<p>#</p>
]]></content>
  </entry>
  <entry>
    <title>PART2 OOP</title>
    <url>/2020/08/29/hbxqf2/</url>
    <content><![CDATA[<h2 id="oo-十问"><a href="#oo-十问" class="headerlink" title="oo 十问"></a>oo 十问</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990522561-b8a98a05-6e3c-471f-a45a-8e7f1468205c.png#align=left&display=inline&height=439&margin=%5Bobject%20Object%5D&originHeight=439&originWidth=775&status=done&style=none&width=775" alt=""></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990522541-f8f1bb96-4ea4-4d5d-9942-6eff8cae02d7.png#align=left&display=inline&height=420&margin=%5Bobject%20Object%5D&originHeight=420&originWidth=679&status=done&style=none&width=679" alt=""></p>
<p>结构化——》命令的集合，可化为线性</p>
<p>oo：向对象发送消息</p>
<p>分类：Objected-Oriented</p>
<p>Object-Based (without Inheritance)</p>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>成员变量，成员函数<br>头文件和源文件<br>头文件：声明</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tdate</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="function"><span class="keyword">void</span> <span class="title">setDate</span><span class="params">(<span class="keyword">int</span> y,<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line">    	<span class="function"><span class="keyword">int</span> <span class="title">isLeapYear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	<span class="keyword">int</span> year,month,day;</span><br><span class="line">&#125;;<span class="comment">//头文件date.h</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tdate::setDate</span><span class="params">(<span class="keyword">int</span> y,<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">//Tdate加在函数名之前返回类型后面，说明是头文件类的方法</span></span><br><span class="line">    year=y;</span><br><span class="line">    month=m;</span><br><span class="line">    data=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Tdate::isLeapYear</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> (year%<span class="number">4</span> == <span class="number">0</span> &amp;&amp; year%<span class="number">100</span> != <span class="number">0</span>) || (year%<span class="number">400</span>==<span class="number">0</span>);&#125;</span><br><span class="line"><span class="comment">//源文件date.cpp</span></span><br><span class="line"></span><br><span class="line">TDate g;<span class="comment">//直接创建对象，并非引用。全局对象，创建在全局静态存储区域</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;     g.SetDate(<span class="number">2000</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      TDate t;<span class="comment">//存储在栈区</span></span><br><span class="line">      t.SetDate(<span class="number">2015</span>,<span class="number">11</span>,<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">      TDate  *p = <span class="keyword">new</span> TDate;<span class="comment">//引用，heap</span></span><br><span class="line">      p-&gt;SetDate(<span class="number">2015</span>,<span class="number">11</span>,<span class="number">17</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果直接在头文件实现类，那么编译器会将成员函数作为 inline 函数。</p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>对象的初始化，内存的分配。</p>
<p>与类同名，无返回类型；自动调用，不可以直接调用；可重载</p>
<p>默认构造函数，无参数。当类中未提供构造函数时，编译系统提供</p>
<p>当一个对象未完成初始化时，其内存是不确定，此时并不算完整的对象。因此，默认构造函数，主要任务是建立标识符，对其内存分配，而非成员变量的赋值。</p>
<p>： 单例，只能通过类内部进行创建。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line">作用：保证一个<span class="class"><span class="keyword">class</span>只有一个实体（<span class="title">instance</span>），并为它提供一个全局唯一的访问点</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">singleton</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	~singleton()&#123;<span class="comment">//析构时使用&#125;</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> singleton* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(_instance == <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			_instance = <span class="keyword">new</span> singleton();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> _instance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">static</span> singleton *_instance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//最好将所有此类的实例化的进口全部堵死</span></span><br><span class="line">	singleton()</span><br><span class="line">	&#123;	&#125;</span><br><span class="line">	singleton(<span class="keyword">const</span> singleton&amp;)</span><br><span class="line">	&#123;	&#125;</span><br><span class="line">	singleton&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> singleton &amp;)</span><br><span class="line">	&#123;	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">singleton *singleton::_instance = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990524736-30434b7f-0a56-48c9-b22c-a17e4cfae07b.png#align=left&display=inline&height=317&margin=%5Bobject%20Object%5D&originHeight=317&originWidth=627&status=done&style=none&width=627" alt=""></p>
<h3 id="成员初始化表"><a href="#成员初始化表" class="headerlink" title="成员初始化表"></a>成员初始化表</h3><p>构造函数的补充，减轻编译器负担</p>
<p>先于构造函数，按类数据成员申明次序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span>&amp;z;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	A():y(<span class="number">1</span>),z(x),x(<span class="number">0</span>)&#123;x=<span class="number">100</span>&#125;;<span class="comment">//顺序是先初始化x,y,z，x=100是赋值，不是初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990522560-1d7137f7-5e97-4bba-9e36-22ba5ded106b.png#align=left&display=inline&height=156&margin=%5Bobject%20Object%5D&originHeight=156&originWidth=412&status=done&style=none&width=412" alt=""></p>
<p>初始化大小不是 x：size 未初始化（先初始化的 p）</p>
<p>成员初始化表作用：</p>
<p>与 Java 不同的是，成员变量除了常量类型外，不允许在类内部初始化（C98）</p>
<p>减轻编译器负担：如果用构造函数赋值，对象已经初始化一次，及赋值了两次</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	A()&#123;m=<span class="number">0</span>;&#125;</span><br><span class="line">    	A(<span class="keyword">int</span> m1)&#123;m=m1;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    A a;<span class="comment">//成员对象</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	B()&#123;x=<span class="number">0</span>;&#125;</span><br><span class="line">    	B(<span class="keyword">int</span> x1)&#123;x=x1;&#125;</span><br><span class="line">    	B(<span class="keyword">int</span> x1,<span class="keyword">int</span> m1):a(m1)&#123;x=x1;&#125;<span class="comment">//指定成员对象的构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    B b1;        <span class="comment">//调用B::B()和A::A()</span></span><br><span class="line">    <span class="function">B <span class="title">b2</span><span class="params">(<span class="number">1</span>)</span></span>;   <span class="comment">//调用B::B(int)和A::A()</span></span><br><span class="line">    <span class="function">B <span class="title">b3</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></span>; <span class="comment">//调用B::B(int,int)和A::A(int)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990524066-4f5bd7e8-0f9b-4e51-891d-a9b844c2c311.png#align=left&display=inline&height=196&margin=%5Bobject%20Object%5D&originHeight=196&originWidth=674&status=done&style=none&width=674" alt=""></p>
<h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><p>对象消亡，系统自动调用，heap 上的对象需要手动调用</p>
<p>释放对象持有的非内存资源</p>
<p>可声明为 private：无法在 stack 上分配对象，只能在 heap 上，强制自主控制对象存储分配,也不能直接 delete，需用手动调用对象的消除</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	A():</span><br><span class="line">    	<span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	～A();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A a;<span class="comment">//报错</span></span><br><span class="line">    A *p=<span class="keyword">new</span> A;<span class="comment">//只能在堆上分配对象（栈资源有限）</span></span><br><span class="line">    p-&gt;destroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>析构函数，类中获取的额外资源（文件资源，网络资源等）释放</p>
<h3 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h3><p>创建对象时，用一同类的对象对其初始化</p>
<p>自动调用</p>
<blockquote>
<p>浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</p>
</blockquote>
<p>public:A(const A&amp; a);(引用&amp;，否则变为递归)</p>
<p>默认拷贝构造函数：Ø 逐个成员初始化(member-wise initialization) Ø 对于对象成员，该定义是递归的</p>
<p>浅拷贝问题：悬挂指针（解决：重载拷贝构造函数和操作符=）</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990524066-4f5bd7e8-0f9b-4e51-891d-a9b844c2c311.png#align=left&display=inline&height=196&margin=%5Bobject%20Object%5D&originHeight=196&originWidth=674&status=done&style=none&width=674" alt=""></p>
<p>通常在深拷贝时，采用自定义拷贝构造函数</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990525301-71ad3959-7990-4188-b92a-51afc3afc4e7.png#align=left&display=inline&height=309&margin=%5Bobject%20Object%5D&originHeight=309&originWidth=339&status=done&style=none&width=339" alt=""></p>
<h3 id="移动构造函数"><a href="#移动构造函数" class="headerlink" title="移动构造函数"></a>移动构造函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">generate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">"test"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> S=generate();</span><br></pre></td></tr></table></figure>

<p>可声明成 private:编译器不能调用拷贝构造函数，防止对象按值传递（需按引用传递）</p>
<h3 id="动态内存"><a href="#动态内存" class="headerlink" title="动态内存"></a>动态内存</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990525352-8b4e118c-d920-4036-844a-17cc6e025798.png#align=left&display=inline&height=452&margin=%5Bobject%20Object%5D&originHeight=452&originWidth=730&status=done&style=none&width=730" alt=""></p>
<p>在 heap 中创建对象</p>
<p>引入 new,delete:正确引用 constructor/destructor</p>
<p>malloc 不调用构造函数</p>
<p>free 不调用析构函数</p>
<p>new 可重载</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	A();</span><br><span class="line">    	A();</span><br><span class="line">&#125;</span><br><span class="line">A *p,*q;</span><br><span class="line">p = <span class="keyword">new</span> A;</span><br><span class="line"> <span class="comment">//在程序的heap中申请一块大小为sizeof(A)的内存</span></span><br><span class="line"><span class="comment">//调用A的默认构造函数对该空间上的对象初始化</span></span><br><span class="line"><span class="comment">//返回创建的对象的地址并赋值给p malloc不会进行后两步</span></span><br><span class="line"></span><br><span class="line">q = <span class="keyword">new</span> A(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//调用A的另一个构造函数 A::A(int)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>  p;</span><br><span class="line"><span class="comment">//调用p所指向的对象的析构函数</span></span><br><span class="line"><span class="comment">//释放对象空间</span></span><br><span class="line"><span class="keyword">delete</span> q;</span><br></pre></td></tr></table></figure>

<p>对象创建：</p>
<p>type ptrName= new type;</p>
<p>type ptrName= new type（params);</p>
<p>对象删除：</p>
<p>delete 后设置指针为 NULL</p>
<p>delete intPtr;</p>
<p>inPtr=NULL;//否则该指针为悬挂指针，今后可能用</p>
<h4 id="动态对象数组"><a href="#动态对象数组" class="headerlink" title="动态对象数组"></a>动态对象数组</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">A *p;</span><br><span class="line">p=<span class="keyword">new</span> A[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">delete</span> []p;</span><br><span class="line"><span class="comment">//不能显示初始化，相应的类必须有默认构造函数，delete 中[]不能省</span></span><br></pre></td></tr></table></figure>

<h4 id="动态二维数组"><a href="#动态二维数组" class="headerlink" title="动态二维数组"></a>动态二维数组</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990525296-fa4e4608-d1a8-4f84-b8d4-9f42b9dd1daf.png#align=left&display=inline&height=468&margin=%5Bobject%20Object%5D&originHeight=468&originWidth=853&status=done&style=none&width=853" alt=""></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990528333-147a995c-747b-4261-bc48-975ae71b9975.png#align=left&display=inline&height=413&margin=%5Bobject%20Object%5D&originHeight=413&originWidth=567&status=done&style=none&width=567" alt=""></p>
<h3 id="const-成员"><a href="#const-成员" class="headerlink" title="const 成员"></a>const 成员</h3><p>初始化放在成员初始化表中，原因：常量只能在初始化时确定值，不能赋值</p>
<p>类中 const 成员，仅在类生存的生命周期内存在，特殊情况：static const 编译期内常量</p>
<p>const 成员变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">const</span>  <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">	     A(<span class="keyword">int</span> c): x(c) &#123;  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>const 成员函数，加上关键字 const（方法声明之后）</p>
<p>常对象只能调用常成员函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1);</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span><span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A::f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  x = <span class="number">1</span>; y = <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A::show</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;  <span class="built_in">cout</span> &lt;&lt;x &lt;&lt; y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> A <span class="title">a</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">a.f();<span class="comment">//error,不可更改常对象内容</span></span><br><span class="line">a.show();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果 f()定义为 const，编译器会报错原因如下<br>类中函数默认参数有<em>const this；<br>void f(A</em> const this)<br>当 const 修饰时，void show(const A* const this);this 指向对象内容不可更改</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> &amp; indirect_int;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     A():indirect_int(*<span class="keyword">new</span> <span class="keyword">int</span>)&#123; ... &#125;</span><br><span class="line">    ~A() &#123; <span class="keyword">delete</span> &amp;indirect_int; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; indirect_int++; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//可更改indirect_int</span></span><br></pre></td></tr></table></figure>

<p>可看出 const 是防止直接改变值。</p>
<p>mutable：允许直接改变值。</p>
<h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><p>同一个类不同对象共享变量：</p>
<ol>
<li>如果共享变量定义为全局变量，则缺乏数据保护</li>
<li>名污染。不同类访问共同的变量</li>
</ol>
<p>静态成员变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span>   x,y;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> shared;</span><br><span class="line">        .....</span><br><span class="line">	&#125;;</span><br><span class="line"><span class="keyword">int</span> A::shared=<span class="number">0</span>;<span class="comment">//定义必须放在类的外部，放在实现文件，不放在头文件，且只能定义一次</span></span><br><span class="line">A a, b;</span><br></pre></td></tr></table></figure>

<p>静态成员函数：只能存取 静态成员函数，调用静态成员函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">	&#123;</span>    <span class="keyword">static</span> <span class="keyword">int</span> shared;</span><br><span class="line">	     <span class="keyword">int</span> x;</span><br><span class="line">	 <span class="keyword">public</span>:</span><br><span class="line">	     <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; …shared…&#125;</span><br><span class="line">	     <span class="function"><span class="keyword">void</span> <span class="title">q</span><span class="params">()</span> </span>&#123; …x…shared…&#125;</span><br><span class="line">	&#125;;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990524697-274823ec-ef23-4036-8239-7219cf86ce0c.png#align=left&display=inline&height=353&margin=%5Bobject%20Object%5D&originHeight=353&originWidth=436&status=done&style=none&width=436" alt=""></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>	&#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> obj_count;</span><br><span class="line">	        …</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">	      A()  &#123;   obj_count++; &#125;</span><br><span class="line">	      ~A()  &#123;   obj_count--; &#125;</span><br><span class="line">	      static int get_num_of_obj() ；</span><br><span class="line">	         …</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span>  A::obj_count=<span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span>  <span class="title">A::get_num_of_obj</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> obj_count; &#125;</span><br><span class="line"><span class="comment">//类对象计数</span></span><br></pre></td></tr></table></figure>

<p>example：</p>
<p>单件模式 singleton</p>
<p>构造函数为私有，用静态函数计数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">singleton</span></span></span><br><span class="line"><span class="class">&#123;</span>	<span class="keyword">protected</span>:<span class="comment">//外界不能创建</span></span><br><span class="line">		 singleton()&#123;&#125;</span><br><span class="line">		 singleton(<span class="keyword">const</span> singleton &amp;);</span><br><span class="line">	<span class="keyword">public</span>:<span class="comment">//static来创建</span></span><br><span class="line">		<span class="function"><span class="keyword">static</span> singleton * <span class="title">instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">		</span>&#123;   <span class="keyword">return</span>  m_instance == <span class="literal">NULL</span>?</span><br><span class="line">				m_instance = <span class="keyword">new</span> singleton: m_instance;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span>  </span>&#123; <span class="keyword">delete</span> m_instance; m_instance = <span class="literal">NULL</span>; &#125;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="keyword">static</span> singleton * m_instance;</span><br><span class="line">&#125;;</span><br><span class="line">singleton * singleton ::m_instance= <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><p>类外部不能访问该类的 private 成员。若通过该类的 public 方法会降低 private 成员的访问效率</p>
<p>友元可以访问该类的私有变量或者函数</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990524440-4c2829cb-3775-449a-8a0e-068b7ac8bf29.png#align=left&display=inline&height=279&margin=%5Bobject%20Object%5D&originHeight=279&originWidth=626&status=done&style=none&width=626" alt=""></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">C::f</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>友元不具有传递性</p>
<p>使用友元的原则</p>
<ul>
<li>避免将 data member 放在公开接口中</li>
<li>努力让接口完满且最小化</li>
</ul>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>基于目标代码复用</p>
<h3 id="单继承（考试重点）"><a href="#单继承（考试重点）" class="headerlink" title="单继承（考试重点）"></a>单继承（考试重点）</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span>       <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">         <span class="keyword">char</span> nickname[<span class="number">16</span>];</span><br><span class="line">         <span class="function"><span class="keyword">void</span> <span class="title">set_ID</span><span class="params">(<span class="keyword">int</span> x)</span>  </span>&#123; id = x; &#125;</span><br><span class="line">         <span class="function"><span class="keyword">void</span> <span class="title">SetNickName</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123; <span class="built_in">strcpy</span>(nickname,s);&#125;</span><br><span class="line">         <span class="function"><span class="keyword">void</span> <span class="title">showInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">         </span>&#123; <span class="built_in">cout</span> &lt;&lt; nickname &lt;&lt; “ : “ &lt;&lt; id &lt;&lt;<span class="built_in">endl</span>; &#125;</span><br><span class="line"> 		 <span class="function"><span class="keyword">void</span> <span class="title">showInfo</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">             <span class="built_in">cout</span> &lt;&lt; nickname &lt;&lt; “ : “ &lt;&lt; id &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">             <span class="built_in">cout</span>&lt;&lt;x;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Undergraduated_Student</span> :</span> <span class="keyword">public</span> Student<span class="comment">//建议public继承</span></span><br><span class="line">&#123;       <span class="keyword">int</span> dept_no;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">         <span class="function"><span class="keyword">void</span> <span class="title">setDeptNo</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; dept_no = x; &#125;</span><br><span class="line">         <span class="function"><span class="keyword">void</span> <span class="title">set_ID</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;...&#125;<span class="comment">//id不可访问</span></span><br><span class="line">		 <span class="function"><span class="keyword">void</span> <span class="title">showInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">             <span class="built_in">cout</span>&lt;&lt;dept_no&lt;&lt;<span class="string">":"</span>&lt;&lt;nickname&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">         &#125;<span class="comment">//overwritten，对基类所有同名函数隐藏</span></span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">   		Student::nickname;<span class="comment">//要声明作用域，否则是重新声明</span></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">setNickName</span><span class="params">()</span>:</span></span><br><span class="line">&#125;;</span><br><span class="line">Undergraduated_Student u;</span><br><span class="line">u.showInfo(<span class="number">10</span>);<span class="comment">//error.不可访问。在Undergraduated_Student名空间进行匹配，匹配上showInfo时进行参数匹配。参数匹配不上，不再会去其他名空间匹配。可以using Student::showInfo</span></span><br></pre></td></tr></table></figure>

<p>在没有继承的情况下，protected 和 private 相同。有继承时，派生类可以访问基类的 protected 成员</p>
<p>派生类不能访问基类对象的 protected 成员(传入已创建好的基类对象）</p>
<p>派生类继承基类中的数据，但不可访问</p>
<p>如果不是公有继承则基类中的所有 public 成员将会变为 private</p>
<p>构造函数和析构函数，赋值操作符重载函数不可继承。</p>
<p>c++与 Java 不同的是，派生类中的函数是重写而不是覆盖。如果需要覆盖，需要指明该函数是 virtual。只要派生类中有同名函数，会对基类其他所有同名函数（参数可能不同）进行隐藏。</p>
<p>。即虚函数。虚函数代表的是多态，而重写是静态绑定</p>
<p>继承方式：private，基类中的成员只和基类访问说明符有关。派生类的用户（派生类的派生类）则与继承方式有关</p>
<h3 id="友元和-protected"><a href="#友元和-protected" class="headerlink" title="友元和 protected"></a>友元和 protected</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">class <span class="title">Base</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">protected</span> :</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> prot_mem;</span></span></span><br><span class="line"><span class="function"><span class="params">&#125; ;</span></span></span><br><span class="line"><span class="function"><span class="params">class Sneaky : <span class="keyword">public</span> Base &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">friend</span> <span class="keyword">void</span> clobber&#123;Sneaky&amp;)</span> </span>;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">void</span> clobber&#123;Base&amp;);</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clobber</span><span class="params">(Sneaky &amp;s)</span> </span>&#123; s.j = s.prot_mem = <span class="number">0</span>; &#125;</span><br><span class="line"><span class="comment">//正确：clobber 能访问Sneaky对象的private和protected成员</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clobber</span><span class="params">(Base &amp;b)</span> </span>&#123; b.prot_mem = <span class="number">0</span>; &#125;</span><br><span class="line"><span class="comment">//错误： clobber 不能访问Base的protected 成员</span></span><br></pre></td></tr></table></figure>

<p>原因是，派生类的友元只能访问派生类的基类保护成员，不能直接访问基类友元</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990524402-eeeb8d10-53c8-4536-bfe2-526110668ec4.png#align=left&display=inline&height=361&margin=%5Bobject%20Object%5D&originHeight=361&originWidth=402&status=done&style=none&width=402" alt=""></p>
<p>成员对象初始化与声明顺序有关</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598017699970-6a043c4a-e925-4498-8096-dffcc238a728.png#align=left&display=inline&height=504&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1008&originWidth=1538&size=299830&status=done&style=none&width=769" alt="image.png"><br>B 的拷贝构造函数会默认初始化 A</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span> <span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> A::A; <span class="comment">//继承A所有的构造函数</span></span><br></pre></td></tr></table></figure>

<h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><h4 id="类型相容"><a href="#类型相容" class="headerlink" title="类型相容"></a>类型相容</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990524694-4eb4860d-8c5b-453c-9f17-d9273e61e519.png#align=left&display=inline&height=176&margin=%5Bobject%20Object%5D&originHeight=176&originWidth=580&status=done&style=none&width=580" alt=""></p>
<p>派生类对象赋值给基类：对象切片 ↑（a 对应存储空间比 b 小，b 中自有属性会丢失）</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990524487-b4dc6879-2c99-404c-b71d-603f33184fb9.png#align=left&display=inline&height=105&margin=%5Bobject%20Object%5D&originHeight=105&originWidth=566&status=done&style=none&width=566" alt=""></p>
<p>传参数尽量传引用否则会产生对象切片（信息会丢失）</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990525380-c184975f-696a-4ad2-99e1-ddbb3c0e87cf.png#align=left&display=inline&height=381&margin=%5Bobject%20Object%5D&originHeight=381&originWidth=760&status=done&style=none&width=760" alt=""></p>
<p>func1，func2 A::f()只看形参的类型（静态绑定）</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990524693-3c7e9160-7cee-45d6-a41b-47b40b3fe191.png#align=left&display=inline&height=437&margin=%5Bobject%20Object%5D&originHeight=437&originWidth=439&status=done&style=none&width=439" alt=""></p>
<p>C++默认前期绑定，java 默认动态绑定</p>
<p>动态绑定：根据实际引用和指向对象的类型。</p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法重定义（override）</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990525389-271dc85b-f530-4d29-9fbe-502c076108a2.png#align=left&display=inline&height=419&margin=%5Bobject%20Object%5D&originHeight=419&originWidth=711&status=done&style=none&width=711" alt=""></p>
<h4 id="后期绑定的实现"><a href="#后期绑定的实现" class="headerlink" title="后期绑定的实现"></a>后期绑定的实现</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span>     <span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="title">g</span><span class="params">()</span></span>;</span><br><span class="line">    h();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;      <span class="keyword">int</span> z;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">       f();</span><br><span class="line">      h();</span><br><span class="line">&#125;;</span><br><span class="line">A a; B b;</span><br><span class="line">A *p;</span><br><span class="line">p=&amp;a;或者p=&amp;b;</span><br><span class="line">p-&gt;f();<span class="comment">//f的实现与对象内存绑定在一起</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990528391-f92e3af0-1c9b-4fa6-9d3e-e58c899d3c06.png#align=left&display=inline&height=426&margin=%5Bobject%20Object%5D&originHeight=426&originWidth=530&status=done&style=none&width=530" alt=""></p>
<p>(*_((char _)p-4))(p)//函数调用即 p-&gt;f()</p>
<p>虚函数表(vtable)索引表</p>
<p>效率低：</p>
<p>空间：多 1byte，以及虚函数表</p>
<p>时间：指针的寻址。多一次解引用</p>
<p>非虚函数调用虚函数&amp;虚函数调用非虚函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span>    <span class="keyword">public</span>:</span><br><span class="line">	    A() &#123; f();&#125;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span>  <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">	    <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123; f(); g(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;   <span class="keyword">public</span>:</span><br><span class="line">	    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">	    <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">B b; <span class="comment">//先调用A的构造函数A::A(),A::f(),B::B() 建议不要在构造函数中调用虚函数</span></span><br><span class="line">A *p=&amp;b;</span><br><span class="line">p-&gt;f(); <span class="comment">// B::f()</span></span><br><span class="line">p-&gt;g(); <span class="comment">//A::g() g是静态绑定的，与p类型有关</span></span><br><span class="line">p-&gt;h();	<span class="comment">//A::h, B::f, A::g    h也称为非虚接口即调用虚函数也调用非虚函数，可以替换部分内容，对应着模板模式。全局函数可以做成非虚接口来实现多态</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span>  <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">( )</span> </span>;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;   <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">( )</span> </span>&#123; g(); &#125;<span class="comment">//f(B* const this)，this-&gt;g();</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">B b;</span><br><span class="line">A* p = &amp;b;</span><br><span class="line">p-&gt;f(); <span class="comment">//都调用b的版本，虚函数调用非虚函数，对象是派生类的</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990525365-a070081c-5a5a-4dad-baf9-04ca59dfd6a5.png#align=left&display=inline&height=485&margin=%5Bobject%20Object%5D&originHeight=485&originWidth=709&status=done&style=none&width=709" alt=""></p>
<p>int f2()override//错误，编译器不允许编译器的重定义</p>
<h4 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h4><p>相当于 Java 里的接口</p>
<p>声明时，在函数原型后面加上=0；</p>
<p>往往只声明，不实现</p>
<h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>至少包含一个纯虚函数</p>
<p>不能创建对象,为派生类提供框架，派生类提供抽象基类的所有成员函数的实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span></span></span><br><span class="line"><span class="class">&#123;</span>      …</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">       <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990524775-e0fda813-8f9d-4043-b50f-64b0eb49b953.png#align=left&display=inline&height=429&margin=%5Bobject%20Object%5D&originHeight=429&originWidth=621&status=done&style=none&width=621" alt=""></p>
<h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990525364-12d2c664-1371-4d03-8c10-8cb6eabe29a8.png#align=left&display=inline&height=534&margin=%5Bobject%20Object%5D&originHeight=534&originWidth=663&status=done&style=none&width=663" alt=""></p>
<h4 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h4><h4 id="私有继承"><a href="#私有继承" class="headerlink" title="私有继承"></a>私有继承</h4><p>只继承实现，不继承接口。（派生类不转化为基类</p>
<p>has-a 关系</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990525442-2f6ae85b-5523-4b64-b62a-b7c53a9ff50e.png#align=left&display=inline&height=440&margin=%5Bobject%20Object%5D&originHeight=440&originWidth=814&status=done&style=none&width=814" alt=""></p>
<h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><p>定义：</p>
<p><em>class</em> &lt;派生类名&gt;：[&lt;继承方式&gt;] &lt;基类名 1&gt;，</p>
<p>[&lt;继承方式&gt;] &lt;基类名 2&gt;，…</p>
<p><em>{</em> 〈成员表〉<em>}</em></p>
<p>继承方式</p>
<p><em>public_、_private</em> 、<em>protected</em></p>
<p>继承方式及访问控制的规定同单继承</p>
<p>派生类拥有所有基类的所有成员</p>
<p>初始化顺序/基类的声明次序：</p>
<p>对基类构造函数/析构函数的调用次序</p>
<p>对基类数据成员的存储安排</p>
<p>名冲突：&lt;基类名&gt;::&lt;基类成员名&gt;</p>
<p>虚基类</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990525369-da07800c-5372-4d55-9fda-7bed69dfba14.png#align=left&display=inline&height=303&margin=%5Bobject%20Object%5D&originHeight=303&originWidth=584&status=done&style=none&width=584" alt=""></p>
<p>#</p>
]]></content>
  </entry>
  <entry>
    <title>2019-review</title>
    <url>/2020/08/29/uwigyz/</url>
    <content><![CDATA[<h1 id="review"><a href="#review" class="headerlink" title="review"></a>review</h1><h2 id="0-卷子"><a href="#0-卷子" class="headerlink" title="0. 卷子"></a>0. 卷子</h2><ol>
<li>PPT 范围外不考</li>
<li>review 中提到的是重点</li>
<li>3：3：3</li>
<li>：<ul>
<li>编程设计思想：小字、动画</li>
<li>不会考概念性的</li>
</ul>
</li>
<li>程序理解题：你就是编译器系列、电脑都比你强系列</li>
<li>代码分析：找问题，完形填空</li>
<li>设计：写一些代码</li>
<li>时间不够先记概念。</li>
</ol>
<h2 id="1-part-1"><a href="#1-part-1" class="headerlink" title="1. part_1"></a>1. part_1</h2><ol>
<li>to me：回去康康函数指针</li>
<li>C++那个关系图，一定要了解一下（10 分）<ul>
<li>简答</li>
</ul>
</li>
<li>宏：</li>
</ol>
<ul>
<li>头文件中的作用</li>
<li>如何定义和 assert debug 相关</li>
<li>宏和 C++新技术的不同</li>
<li>可以被 consts，enums，inlines 替代<ul>
<li>区别</li>
</ul>
</li>
</ul>
<ol start="3">
<li>const：</li>
</ol>
<ul>
<li>static const：赋值放在 cpp 之外并不允许二次出现 static<ul>
<li>定义在类外</li>
<li>不许二次定义</li>
<li>要当变量用得再声明</li>
<li>新标准可以放在声明时候赋值，但是此时是一个常量，为了取地址要二次声明。但是这个时候不许赋值了？？？？？？？？？？？？？？？？？？？？？？？</li>
</ul>
</li>
<li>能 const 就 const</li>
<li>iterator：<ul>
<li>const T*  t：正确但不方便<ul>
<li>改进</li>
</ul>
</li>
<li>T* const  t：指针不能动，不太对</li>
</ul>
</li>
<li>return value：返回右值要 const 类型</li>
<li>下标操作符需要两个类型：是 const 函数和不是 const 函数</li>
</ul>
<ol start="4">
<li>控制流没啥好考的</li>
<li>操作符重载：写法、标准格式<ul>
<li>[]</li>
<li>二义性</li>
</ul>
</li>
<li>表达式：<ul>
<li>左值、右值</li>
<li>优先级</li>
<li>副作用：自增自减</li>
</ul>
</li>
<li>inline：内联函数<ul>
<li>推荐而非强制（你瞎用会被编译器忽略</li>
<li>内联的本质类似于替换（就和宏类似</li>
<li>函数指针不一定会内联<ul>
<li>指针要有地址，如果内联了可能没指向</li>
<li>看调用方式</li>
</ul>
</li>
</ul>
</li>
<li>编译模块<ul>
<li>什么时候需要头文件？<ul>
<li>C++按照编译单元进行编译。</li>
<li>在模块中的使用需要提前有 include 头文件</li>
<li>“.h”引入需要小心重新编译（引入的头文件有改变，所有依赖的都要改</li>
<li>不引入头文件：使用<strong>引用、指针</strong>只需要一个前项声明<ul>
<li>可以隔离模块</li>
</ul>
</li>
<li>结论：声明是肯定要有的，看你需不需要大小来决定要不要头文件</li>
</ul>
</li>
</ul>
</li>
<li></li>
<li>静态变量使用时的声明方法</li>
<li>non-local non-class 的东西</li>
</ol>
<h2 id="2-part-2"><a href="#2-part-2" class="headerlink" title="2. part_2"></a>2. part_2</h2><ol>
<li>模板和异常用到的比较简单，不会考的很复杂</li>
<li>单例模式：<ul>
<li>确定非局部状态变量状态，把其变成类内的</li>
</ul>
</li>
<li>类的构造和析构</li>
<li>对象的初始化和对象的赋值</li>
<li>类的分配和释放函数的使用</li>
<li>对象的按值传递和按引用传递、按常量传递、按指针传递</li>
<li></li>
<li>隐式/显式类型转换<ul>
<li>隐式：兼容类型、构造函数<ul>
<li>explicit：防止隐式类型转换</li>
<li>引用和指针因为不进行构造，不会转化</li>
</ul>
</li>
</ul>
</li>
<li>编译器帮你生成的和需要自己写的</li>
<li>操作符重载</li>
</ol>
<ul>
<li>友元/内嵌<ul>
<li>内嵌在不同的标准实现不同</li>
<li>会一种就行</li>
<li>能认不用能写</li>
</ul>
</li>
</ul>
<ol start="11">
<li>模板、泛型</li>
<li>是否需要新类型？</li>
</ol>
<h2 id="3-eg"><a href="#3-eg" class="headerlink" title="3. eg"></a>3. eg</h2><ol>
<li>call by value/ref<ul>
<li>string 也是类，有 string 也要调用拷贝构造函数</li>
<li>想调虚函数最好传指针</li>
<li>按值传递会造成</li>
</ul>
</li>
<li>操作符重载：<ul>
<li>返回局部变量的引用或者指针有被销毁的风险</li>
<li>大多数情况返回局部变量</li>
<li>左值结果一般返回引用，可以继续使用（连着用</li>
<li>二义性</li>
</ul>
</li>
<li>初始化：<ul>
<li>一般都要自己做一遍</li>
<li>成员初始化表：const、类（成员对象，只要一次拷贝构造）<ul>
<li>内置类型放哪都行</li>
<li>成员对象不想拷贝构造的话，不传值就行</li>
</ul>
</li>
<li>构造顺序<ul>
<li>多继承、虚继承</li>
<li>成员对象顺序</li>
</ul>
</li>
</ul>
</li>
<li>构造函数：<ul>
<li>默认 or not</li>
<li>调用顺序</li>
<li>在构造函数里调虚函数相当于调自己的函数（没有纯虚函数表也没有对象</li>
</ul>
</li>
<li>拷贝构造：<ul>
<li>拷贝构造、拷贝赋值</li>
<li>自己的拷贝函数要完整：<ul>
<li>成员对象全调拷贝函数</li>
<li>指针数组要申请新空间</li>
<li>赋值和拷贝构造同时更新</li>
</ul>
</li>
<li>基类成员私有：子类拷贝构造在初始化值表（长得很像成员初始化表）里用<ul>
<li>同步更新拷贝赋值：直接调用父类函数</li>
</ul>
</li>
</ul>
</li>
<li>析构函数：有多态定义为虚函数<ul>
<li>标准库都没有虚析构函数，最好不要继承</li>
</ul>
</li>
<li>静态变量：<ul>
<li>对于和，成员变量必须通过构造函数的的方式初始化。例如：上述程序中的 r 和 d 变量的初始化。<br>对于，static 成员变量需要在类定义体外进行初始化与定义，因为 static 数据成员独立该类的任意对象存在，它是与类关联的对象，不与类对象关联。例如：上述程序中的 c 变量的初始化。<br>对于，该类型成员可以直接在类中初始化，也可以在类中声明，在类定义体外进行定义。例如：上述程序中的 x 和 xx 变量。<br>对于，该类型也是可以在类中声明在类定义体外进行定义，或者直接在类中定义初始化。例如：上述程序中的 z 和 zz 变量。```c<br>#include <iostream></li>
</ul>
</li>
</ol>
<p>using namespace std;</p>
<p>class Test<br>{<br>public:<br>Test() : y(1), r(y), d(3){} //对于常量型成员变量和引用型成员变量，必须通过参数化列表的方式进行初始化。<br>~Test(){}</p>
<pre><code>int y;      //普通变量成员
int &amp;r;     //引用成员变量
const int d;    //常量成员变量
static int c;   //静态成员变量
static const int x = 2.1;   //静态常量整型成员变量
static const int xx;        //静态常量整型成员变量声明
static const double z;  //静态常量非整型成员变量声明
static const float zz = 6.6;    //静态常量非整型成员变量</code></pre><p>};</p>
<p>const int Test::xx = 4; //静态常量整型成员变量定义<br>const double Test::z = 5.1; ////静态常量非整型成员变量定义<br>int Test::c = 2;</p>
<p>int main(void)<br>{<br>cout &lt;&lt; Test::x &lt;&lt; endl;</p>
<pre><code>return 0;</code></pre><p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 4. myPro</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 1. 操作符重载</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. 二进制运算符&#96;&#x3D;&#96;（赋值），&#96;[]&#96;（数组订阅），&#96;-&gt;&#96;（成员访问）以及n元&#96;()&#96;（函数调用）运算符必须始终实现为**成员函数**。</span><br><span class="line">2. 一般法则</span><br><span class="line">   - 如果它是一**元运算符**，请将其实现为**_成员*_函数。</span><br><span class="line">   - 如果二进制运算符将**两个操作数均等地**对待（使它们不变），则将该运算符实现**_为非成员*_函数。</span><br><span class="line">   - 如果二进制运算符**_不能*_平等地***对待其两个操作数（通常会更改其左操作数），则在必须访问该操作数的私有部分的情况下，使其成为其左操作数类型的**_成员*_函数可能会很有用。</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>part 1 结构化编程</title>
    <url>/2020/08/29/sigxak/</url>
    <content><![CDATA[<h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><ol>
<li>三要素：syntax（语法），semantic（语义），pragmatics（语用）</li>
<li>Backus–Naur Form：形式化语言描述程序语言<br>EBNF<br>::- _ _<br>A ::- a|b<br>D ::-0|1<br>定义无限集合 A::- aA|bA|A<br>A D 代表一个系列或者一个集合<br>判定：reduce/deduct</li>
<li>Avram Noam Chomsky   认为自然语言可以严格表示<br>G=（VN，VT，R，Z）<br>语言可以分成四类：RG，CFG，CSG，PSG<br>对应识别模型：FA(finite automata) ,PDA(pushdown),LBA (linear bounded),TM(turing machine)<br>对特例：ad hoc</li>
<li>语言的定义：特定的字母表上，按照语法，字符串组成的集合</li>
<li>语义;static dynamic<br>表示：操作语义、指称语义、公理语义</li>
</ol>
<h2 id="programming"><a href="#programming" class="headerlink" title="programming"></a>programming</h2><p>David Gries 认为科学对待编程——&gt;calculus { Q } S { R }<br>Donald Ervin Knuth 认为程序是艺术</p>
<h2 id="programming-paradigm-编程范式"><a href="#programming-paradigm-编程范式" class="headerlink" title="programming paradigm 编程范式"></a>programming paradigm 编程范式</h2><p>imperative programming：命令式</p>
<ol>
<li>过程</li>
<li>面向对象<br>declarative programming</li>
<li>functional：无副作用</li>
<li>logical<br>函数的副作用：改变环境的某些参数（函数调用与顺序有关）</li>
</ol>
<h2 id="c-的诞生"><a href="#c-的诞生" class="headerlink" title="c++的诞生"></a>c++的诞生</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597977929499-e3b5c9a4-6ce1-4cef-9f61-a10ac19cf2e7.png#align=left&display=inline&height=577&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1154&originWidth=1652&size=1508523&status=done&style=none&width=826" alt="image.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/jpeg/392607/1597663643348-b2536333-2e52-4879-a355-66bfe2152ad2.jpeg#align=left&display=inline&height=730&margin=%5Bobject%20Object%5D&originHeight=730&originWidth=1246&status=done&style=none&width=1246" alt=""><br>来源一：<br>fortran：科学的语言描述<br>algol60: 程序设计作为单独的学科<br>algol68:程序的标杆<br>这三者是对结构化编程的支持</p>
<p>来源二<br>BCPL/C：对系统软件的支持，可以直接触碰硬件，（不叫 D，叫 C++ 完全包含 c，并未淘汰 C 中不好的东西）</p>
<p>来源三：<br>simula67: class inherit 封装与继承。提到了虚函数（未从程序设计角度设计该语言 runtime 很慢，使用人较少）第一个有 OO 特征的语言</p>
<p>来源四：<br>CLu，Ada：源代码级别，更高层次的抽象<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/jpeg/392607/1597663643321-63aa84c9-12f9-41f3-823d-dd9948cf0795.jpeg#align=left&display=inline&height=310&margin=%5Bobject%20Object%5D&originHeight=310&originWidth=324&status=done&style=none&width=324" alt=""></p>
<p>C++诞生：</p>
<ol>
<li>1979:博士论文，simula 性能太差（linker 连接器出现问题），BCPLdebug 难。愿望：带有 simula 的 algol68 以 C 为基础实现。哲学观：实用主义，文学观：存在主义</li>
<li>带类的 C。工具：Cpre（预编译为 C）</li>
<li>linker 分别编译（编译一致性）类型安全</li>
<li>1983:用户 产业界+大学；运行环境： 硬件+OS。 cfront<img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/jpeg/392607/1597663643402-60c4749c-bbde-4d66-a886-3d062bf419f9.jpeg#align=left&display=inline&height=488&margin=%5Bobject%20Object%5D&originHeight=976&originWidth=496&status=done&style=none&width=248" alt=""><br>预处理：编辑（edit）对 define 一些进行编辑。cpre：把 C++程序翻译成 c 程序给 Ccomlpier 发现语法错误，不懂 C 的语法。Cfront 懂 C 语法。</li>
</ol>
<p>区分初始化和赋值</p>
<p>c 和 c++ 的关系：超集。c 艹支持 c 所支持的全部编程技巧。任何 c 程序都能被 c 艹用基本相同的方法编写，并具备同等开销（时间、空间）</p>
<h2 id="结构化程序设计部分"><a href="#结构化程序设计部分" class="headerlink" title="结构化程序设计部分"></a>结构化程序设计部分</h2><p>地址：</p>
<table>
<thead>
<tr>
<th>code</th>
</tr>
</thead>
<tbody><tr>
<td>global data   全程存在</td>
</tr>
<tr>
<td>stack   编译器决定 function 局部存在</td>
</tr>
<tr>
<td>heap   动态的，由程序员决定</td>
</tr>
</tbody></table>
<p>管理地址：指针</p>
<p>类型——》决定数据的行为</p>
<p>强/弱，静/动</p>
<p>c++属于强类型，动静结合。但允许程序员打破强类型</p>
<h2 id="data"><a href="#data" class="headerlink" title="data"></a>data</h2><p>名、值、地址、类型、性质</p>
<p>处理：算数、逻辑、I/O</p>
<p>四种基本类型：int char float double(built-in)</p>
<p>typedef：为已有的类型取别名，</p>
<h2 id="expression"><a href="#expression" class="headerlink" title="expression"></a>expression</h2><p>data type</p>
<p>类型转换方式：coersion（隐式，casting（显式</p>
<p>求值次序：<em>d + x/y</em>d + ++y*。副作用：overflow</p>
<p>exception</p>
<p>操作符重载（多态）</p>
<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>表达式语句</p>
<p>IO 语句</p>
<p>控制流语句<br>framework</p>
<h3 id="switch-优化："><a href="#switch-优化：" class="headerlink" title="switch 优化："></a>switch 优化：</h3><p>用枚举类型 enum 代替字面常量</p>
<p>I18N</p>
<p><strong>表驱动</strong>：空间开销代替时间开销</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><table>
<thead>
<tr>
<th>code</th>
</tr>
</thead>
<tbody><tr>
<td>data</td>
</tr>
<tr>
<td>stack</td>
</tr>
<tr>
<td>heap</td>
</tr>
</tbody></table>
<p>stack 与 data 区域区别：后者是全生命周期，前者利用代码的局部性，可以重复使用</p>
<p>是浮动的，生命周期是由编译器决定的</p>
<p>因为 stack 是重复使用，需要进行管理</p>
<p>heap：动态数据，生命周期是由程序员决定的。（free 归还）</p>
<h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><p>定义不允许嵌套，先定义后使用</p>
<p>执行机制：建立被调用函数的占空间，参数传递，保存调用函数的运行状态，将控制转交给被调函数</p>
<p>stack 生长方向：高地址向低地址</p>
<p>ebp：栈底指针（当前函数）</p>
<p>esp：栈顶指针</p>
<h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><p>值传递 value</p>
<p>cost：传输内容，指令地址（eip）栈顶和栈底 0</p>
<p>引用传递 reference</p>
<p>总结：</p>
<ol>
<li>push arguments</li>
<li>save context:save return address, save caller’s base pointer</li>
<li>execute function:set new base pointer,allocate space, carry out some tasks,release space</li>
<li>recover context</li>
<li>continue to execute caller function</li>
</ol>
<p>call by name :delayed evaluation</p>
<p>前提：函数无副作用。</p>
<p>call by value result</p>
<h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>名同参数不同</p>
<p>c 不支持，c++支持</p>
<h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>void f(int,int=2);</p>
<p>默认参数用在声明。默认参数顺序：右到左。</p>
<h3 id="inline-内联函数"><a href="#inline-内联函数" class="headerlink" title="inline 内联函数"></a>inline 内联函数</h3><p>不产生函数调用，减少开销，增强可读性</p>
<p>实现方法：编译系统将为 inline 创建一段代码，在调用点，做替换。</p>
<p>不能实现递归</p>
<p><strong>适用</strong>：使用频率高，简单，小段代码。如构造函数</p>
<p><strong>限制：非递归</strong></p>
<p>仅是对编译器的建议，并不是说声明了内联就会内联，声明内联只是一个建议而已。</p>
<p><strong>定义</strong>在类中的<strong>成员函数</strong>默认都是<strong>内联的</strong>，如果在类定义时就在类内给出函数定义，那当然最好。如果在类中未给出成员函数定义，而又想内联该函数的话，那在类外要加上  <strong>inline</strong>，否则就认为不是内联的。</p>
<p>inline 是一种”<strong>用于实现的关键字</strong>“，而不是一种”用于声明的关键字”。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foo</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Foo</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;&#125; <span class="comment">// inline 与函数定义体放在一起</span></span><br></pre></td></tr></table></figure>

<p>强行使用 inline 的缺点：</p>
<ol>
<li>增大目标代码（1000+20，inline：1000*20）</li>
<li>病态换页——抖动（trash）</li>
<li>降低指令 cache 的命中率</li>
</ol>
<p>被 cc 拒绝的类型：长且复杂如 loop，swtich/指针</p>
<h2 id="程序组织"><a href="#程序组织" class="headerlink" title="程序组织"></a>程序组织</h2><p>程序结构：逻辑结构，物理结构</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597221256777-ff68a974-a3de-414d-8fbe-83a3aa827b6c.png#align=left&display=inline&height=518&margin=%5Bobject%20Object%5D&originHeight=518&originWidth=499&status=done&style=none&width=499" alt=""></p>
<p>lib 文件：obj 文件的组合<br>头文件：常量的定义，变量/函数声明，类型定义，内联函数，编译预处理</p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>程序级(Code,data 全生命周期)，文件级（全生命周期），函数级(stack），块级（stack）。</p>
<p>引用外部文件：extern 修饰</p>
<p>协同——》头文件</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597221256792-8861b183-a1eb-44f2-8960-3bd00fbe3138.png#align=left&display=inline&height=471&margin=%5Bobject%20Object%5D&originHeight=471&originWidth=686&status=done&style=none&width=686" alt=""></p>
<p>对外不可见：static：程序级——》文件级</p>
<p>特殊：静态局部变量仍然在 stack（全生命周期）。<br>main：全生命周期，但是又在 stack（在栈底部）</p>
<p>常量：默认文件级</p>
<p><strong>总结</strong>：接口放在头文件中，不想对外使用用 static 修饰，常量通常提出一个头文件（const.h)</p>
<p>头文件：常量定义、变量/函数声明、编一预处理、类型定义，<strong>内联函数</strong></p>
<p>inline 基于源代码的复用，即将其完整写入头文件。</p>
<p>（基于目标代码的复用，只需看到接口）</p>
<p>如果 inline 被拒绝后，cc 将其变为 static（局部于文件作用域），否则同一份代码存在不同文件，造成代码冗余</p>
<h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><p>有限的作用域更加灵活的运用</p>
<p>理念</p>
<ol>
<li>兼容：防冲突；遇冲突，可选择，易扩展</li>
</ol>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597221259730-d3a2a910-8682-46fe-8ef4-94bbe516fc31.png#align=left&display=inline&height=220&margin=%5Bobject%20Object%5D&originHeight=220&originWidth=475&status=done&style=none&width=475" alt=""></p>
<ol start="2">
<li>快速</li>
</ol>
<p>两种形式：</p>
<p>declaration</p>
<p>directive</p>
<p>namespace 中的变量 和全局变量命名相同时会报错</p>
<h2 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h2><h3 id="编译预处理（不懂-c-语法）"><a href="#编译预处理（不懂-c-语法）" class="headerlink" title="编译预处理（不懂 c++语法）"></a>编译预处理（不懂 c++语法）</h3><p>潜伏于环境：保持 cpp 不变，改变源程序语义</p>
<p>穿透作用域</p>
<h4 id="类型："><a href="#类型：" class="headerlink" title="类型："></a>类型：</h4><ol>
<li>include： compose source text</li>
<li>define：</li>
</ol>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597221256692-921e2e82-5db9-4731-83d1-771c023fecc6.png#align=left&display=inline&height=299&margin=%5Bobject%20Object%5D&originHeight=299&originWidth=457&status=done&style=none&width=457" alt=""></p>
<p>只是替换，无类型检查</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mul(a,b) a*b</span></span><br><span class="line"><span class="keyword">int</span> x= mul(<span class="number">1</span>+<span class="number">2</span>,<span class="number">2</span>+<span class="number">3</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;x;<span class="comment">//8 not 15</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>indef</li>
<li>pragma</li>
</ol>
<p><strong>预处理指令</strong></p>
<blockquote>
<ol>
<li>#空指令，无任何效果</li>
<li>#include 包含一个源代码文件</li>
<li>#define 定义宏</li>
<li>#undef 取消已定义的宏</li>
<li>#if 如果给定条件为真，则编译下面代码</li>
<li>#ifdef 如果宏已经定义，则编译下面代码</li>
<li>#ifndef 如果宏没有定义，则编译下面代码</li>
<li>#elif 如果前面的#if 给定条件不为真，当前条件为真，则编译下面代码</li>
<li>#endif 结束一个#if……#else 条件编译块</li>
<li>#error 停止编译并显示错误信息</li>
</ol>
</blockquote>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>c++允许数组越界</p>
<p>函数接口：void f(int a[],int n);//元素的个数需要参数显示的给出，不能通过 sizeof 获得</p>
<p>对于 char a[]=”abc”;char b[]={‘a’,’b’,’c’}; 前者可以用 cout，后者不行（无’\0’)</p>
<p>多维数组：降维处理</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597992968319-edbd867b-dc1e-4edd-8206-4932d4c1fc66.png#align=left&display=inline&height=466&margin=%5Bobject%20Object%5D&name=image.png&originHeight=932&originWidth=1288&size=271228&status=done&style=none&width=644" alt="image.png"></p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>char s1=”abc”;等同于{‘a’,‘b’,‘c,’\0‘}</p>
<p>char s2={‘a’,‘b’,‘c}</p>
<p>烫出现原因：0xCCCC。vs 默认填充，为了容易发现错误</p>
<h3 id="struct-结构"><a href="#struct-结构" class="headerlink" title="struct 结构"></a>struct 结构</h3><p>和 class 区别：class 默认私有，struct 默认公开</p>
<p>alignment：以提高访问效率</p>
<p>sizeof 不一定是数据大小之和，默认对齐大小为 4</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    short c;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; <span class="keyword">sizeof</span>(B);<span class="comment">//12</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>共享存储空间</p>
<p>不同名称分配同一地址</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597221256748-b4b7c8aa-e0c2-45f2-b7bc-be549ef1297b.png#align=left&display=inline&height=253&margin=%5Bobject%20Object%5D&originHeight=253&originWidth=378&status=done&style=none&width=378" alt=""></p>
<p>公共的属性要在公共的部分</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> c&#123;</span><br><span class="line">    <span class="keyword">char</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    short z;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="keyword">sizeof</span>(c);<span class="comment">//4</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597995250098-a42e9602-2791-425b-93f9-10d3b0a56038.png#align=left&display=inline&height=444&margin=%5Bobject%20Object%5D&name=image.png&originHeight=888&originWidth=1326&size=114437&status=done&style=none&width=663" alt="image.png"><br>FIGURE_TYPE 用于判断图形类别相当于标识</p>
<p>添加其他属性<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597995326962-954b78d3-ab91-465d-a6e1-eeb6c44bf2cf.png#align=left&display=inline&height=525&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1050&originWidth=1604&size=186089&status=done&style=none&width=802" alt="image.png"></p>
<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>主要作用：管理地址信息。管理数据，调用代码</p>
<h4 id="定义与基本操作"><a href="#定义与基本操作" class="headerlink" title="定义与基本操作"></a>定义与基本操作</h4><p>单纯的管理地址：void*可以做公共接口，任何操作必须强制类型转换</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> *p=&amp;a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> *p1=p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> *q=p;</span><br><span class="line">*((<span class="keyword">int</span>*) q)</span><br></pre></td></tr></table></figure>

<p>p1 的赋值是错误的不安全。但是 q 可以，但是无法对地址对应的值进行直接操作</p>
<h6 id="pointer-literal"><a href="#pointer-literal" class="headerlink" title="pointer literal"></a>pointer literal</h6><p>nullptr：初始化不知道指针所指地址时，保证指针处于安全位置</p>
<p>c:#define NULL ((void*)0)</p>
<pre><code>可能造成问题：其他类型指针再次赋值void*，导致不同类型指针的赋值</code></pre><p>c++：#define NULL 0</p>
<pre><code>        int *p=NULL；

可能造成问题：函数重载如：func(int); func(char*);那么func(NULL)会调用第一个</code></pre><p>c++17:nullptr</p>
<p>加减数字：单位（sizeof（数据类型））</p>
<p>同类型相减：偏移量</p>
<p>输出：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597221256791-c3453b5b-3369-4661-83af-c364a053ca2a.png#align=left&display=inline&height=354&margin=%5Bobject%20Object%5D&originHeight=354&originWidth=682&status=done&style=none&width=682" alt=""></p>
<p>特例原因：cout 实现机制</p>
<p>ostream&amp;operator&lt;&lt;(osteam&amp;,char*)</p>
<h5 id="void"><a href="#void" class="headerlink" title="void*"></a>void*</h5><p>只能管理信息。除了赋值操作，必须做强制转换</p>
<p>例：将某块内存清零—&gt;把内存中的每一个 byte 设为 0</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">memset</span><span class="params">(<span class="keyword">void</span>*pointer,<span class="keyword">unsigned</span> <span class="built_in">size</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>*p=(<span class="keyword">char</span>*)pointer;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="built_in">size</span>;k++)</span><br><span class="line">        *p++=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    ....</span><br><span class="line">&#125;a;</span><br><span class="line"><span class="keyword">int</span> B[<span class="number">100</span>]</span><br><span class="line"><span class="built_in">memset</span>(&amp;a,<span class="keyword">sizeof</span>(A));</span><br><span class="line"><span class="built_in">memset</span>(&amp;B,<span class="keyword">sizeof</span>(B))</span><br></pre></td></tr></table></figure>

<h5 id="常量指针-const-TYPE-NAME"><a href="#常量指针-const-TYPE-NAME" class="headerlink" title="常量指针 const TYPE *NAME"></a>常量指针 const TYPE *NAME</h5><p>常量指针不可赋值 只读不写</p>
<p>const 变量只能用常量指针获取地址（不能间接改变常量）</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597221256690-ebf8998d-a63f-4e28-a88a-3c3ec5557147.png#align=left&display=inline&height=283&margin=%5Bobject%20Object%5D&originHeight=283&originWidth=429&status=done&style=none&width=429" alt=""></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line">*cp=<span class="number">1</span>;<span class="comment">//错误</span></span><br><span class="line">*p=<span class="number">2</span>;<span class="comment">//正确</span></span><br><span class="line"><span class="keyword">int</span> y=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> x=<span class="number">2</span>;</span><br><span class="line">cp=&amp;y;<span class="comment">//正确</span></span><br><span class="line">q=&amp;x;<span class="comment">//错误，不能间接地改变常量 q=const_cast&lt;int*&gt;(&amp;x)</span></span><br></pre></td></tr></table></figure>

<p>改变读写权限/保护变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>*p)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> c=<span class="number">8</span>;</span><br><span class="line"><span class="built_in">print</span>(&amp;c);<span class="comment">//不可用</span></span><br></pre></td></tr></table></figure>

<p>const_cast&lt;int*&gt;取消常量属性</p>
<h5 id="指针常量"><a href="#指针常量" class="headerlink" title="指针常量"></a>指针常量</h5><p>只能在定义时初始化。<br>int*const p=&x;</p>
<p>不可移动的指针，但是可以管理内存</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">int</span> *<span class="keyword">const</span> p=&amp;x;</span><br><span class="line"></span><br><span class="line">p=&amp;y;<span class="comment">//错误，p不能移动；</span></span><br><span class="line">*p=<span class="number">1</span>;<span class="comment">//正确，可以改变内存的值,x会变</span></span><br></pre></td></tr></table></figure>

<p>const int*const p//初始化值和所指内容都不能改变</p>
<h5 id="指针与函数"><a href="#指针与函数" class="headerlink" title="指针与函数"></a>指针与函数</h5><p>&lt;&gt;()()</p>
<p>类型 （*函数名） （类型，类型，….)</p>
<p>函数指针和表驱动</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597998896529-520f1347-ac08-41a4-b418-62c158211726.png#align=left&display=inline&height=463&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1278&originWidth=1698&size=269513&status=done&style=none&width=615" alt="image.png"></p>
<h5 id="指针与数组："><a href="#指针与数组：" class="headerlink" title="指针与数组："></a>指针与数组：</h5><p>数组名实际是地址（int*const)常量地址长度</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597999254696-4d455e67-ceda-4340-91e9-ddaab1a3dda4.png#align=left&display=inline&height=522&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1044&originWidth=1742&size=315545&status=done&style=none&width=871" alt="image.png"><br>指针数组：</p>
<p>char*s1[]={“c++”,”java”,”python”}（存的是引用）</p>
<p>char *s2[][8]={“c++”,”java”,”python”}(存的是字符）</p>
<p>main 函数：</p>
<p>int main(int agrc, char*<em>argv[],char</em> env[])</p>
<p>argc：参数个数</p>
<p>argv：命令行参数</p>
<p>env：环境参数</p>
<p>可变参数：</p>
<p>int printf(const char*,…)</p>
<h5 id="多级指针"><a href="#多级指针" class="headerlink" title="多级指针"></a>多级指针</h5><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597999940520-31b5e962-a193-4b67-af69-5cced1130d7c.png#align=left&display=inline&height=407&margin=%5Bobject%20Object%5D&name=image.png&originHeight=814&originWidth=1520&size=136785&status=done&style=none&width=760" alt="image.png"></p>
<h3 id="动态变量"><a href="#动态变量" class="headerlink" title="动态变量"></a>动态变量</h3><p>stack(生存规律可知)</p>
<p>heap 生命周期由程序决定</p>
<p>非编译时刻确定，存在 heap</p>
<h4 id="申请与归还"><a href="#申请与归还" class="headerlink" title="申请与归还"></a>申请与归还</h4><p>new&lt;类型&gt;</p>
<p>int  *p=new int;</p>
<p>int &amp;a=*p;(引用)</p>
<p>delete p;(归还)</p>
<p>或者是，</p>
<p>int<em>p=(int</em>) malloc(sizeof(int))</p>
<p>free(p);</p>
<p>申请一组：</p>
<p>new &lt;类型&gt;[整型数组]</p>
<p>int *p=new int[16]</p>
<p>int<em>p=(int</em>) malloc(sizeof(int)*16)</p>
<p>多维数组的申请</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> i5arr[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    i5arr *p=<span class="keyword">new</span> i5arr[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者是</span></span><br><span class="line"><span class="keyword">int</span> *p=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> (*q)[<span class="number">5</span>]=(<span class="keyword">int</span>(*)[<span class="number">5</span>])p;</span><br></pre></td></tr></table></figure>

<p>由于申请内存可能申请不到，因此需要判断是否有效，做异常处理</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (p!=null)</span><br><span class="line">    <span class="comment">//.....</span></span><br></pre></td></tr></table></figure>

<p>delete /delete[]：面向对象编程时，前者只会调用数组第一个的析构函数，后者会逐个调用每个对象的析构函数</p>
<p>free：只归还空间不调用析构函数</p>
<p>内存分配时，系统会自动创建一个 cookie，其包含了分配大小</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">    *(p++)=<span class="number">128</span>;</span><br><span class="line"><span class="keyword">delete</span>[]p;</span><br><span class="line"><span class="comment">//这样会导致系统free128个单位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//因此,不能移动申请指针</span></span><br><span class="line"><span class="keyword">int</span> *p=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">int</span> *q=p;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">    *(q++)=<span class="number">128</span>;</span><br><span class="line"><span class="keyword">delete</span>[]p;</span><br></pre></td></tr></table></figure>

<h4 id="new-和-malloc-差别"><a href="#new-和-malloc-差别" class="headerlink" title="new 和 malloc 差别"></a>new 和 malloc 差别</h4><p>语法上 malloc 需要强制类型转换</p>
<p>语义上 面向对象编程时，new 会自动调用构造函数</p>
<h4 id="应用——链表"><a href="#应用——链表" class="headerlink" title="应用——链表"></a>应用——链表</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NODE</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> content;</span><br><span class="line">    NODE*next;</span><br><span class="line">&#125;;</span><br><span class="line">NODE*head=<span class="literal">NULL</span>:</span><br></pre></td></tr></table></figure>

<p>Insert</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">NODE*p=<span class="keyword">new</span> NODE;</span><br><span class="line">p-&gt;content=_value;</span><br><span class="line">p-&gt;next=null;</span><br><span class="line"><span class="comment">//头部插入</span></span><br><span class="line">p-&gt;next=head;</span><br><span class="line">head=p;</span><br><span class="line"><span class="comment">//尾部插入</span></span><br><span class="line">NODE*q=head;</span><br><span class="line"><span class="keyword">while</span>(q-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">    q=q-&gt;next;</span><br><span class="line">q-&gt;next=p;</span><br><span class="line"><span class="comment">//中间结点后插入</span></span><br><span class="line">NODE*q=head;</span><br><span class="line"><span class="keyword">while</span>(q-&gt;next!=<span class="literal">NULL</span>&amp;&amp;q-&gt;content!=a)</span><br><span class="line">    q=q-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(q!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    p-&gt;next=q-&gt;next;</span><br><span class="line">    q-&gt;next=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"NOT FOUND"</span>;</span><br><span class="line"><span class="comment">//中间结点前插入（双指针）</span></span><br><span class="line">NODE *q1=<span class="literal">NULL</span>, *q2=head;</span><br><span class="line"><span class="keyword">while</span> (q2 !=<span class="literal">NULL</span>  &amp;&amp; q2-&gt;content != a)&#123;</span><br><span class="line">    q1 = q2;</span><br><span class="line">    q2 = q2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(q2  != <span class="literal">NULL</span>) 	<span class="comment">//存在a</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>  (<span class="literal">NULL</span> == q1) 	<span class="comment">// a是第一个结点</span></span><br><span class="line">       &#123;   p-&gt;next = q2; head = p;   &#125;</span><br><span class="line">    <span class="keyword">else</span>  	<span class="comment">// a不是第一个结点</span></span><br><span class="line">      &#123;    p-&gt;next = q2;    q1-&gt;next = p;  &#125;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">else</span>    <span class="comment">//不存在ai</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Not found!"</span>;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597221256771-75c3ba7c-66ce-4c0e-9e2c-47f1626ee278.png#align=left&display=inline&height=444&margin=%5Bobject%20Object%5D&originHeight=444&originWidth=782&status=done&style=none&width=782" alt=""></p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>为一块已有的内存空间取别名</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597221259627-7be42acf-3d37-47c2-bb0f-52ea9cac25e8.png#align=left&display=inline&height=324&margin=%5Bobject%20Object%5D&originHeight=324&originWidth=418&status=done&style=none&width=418" alt=""><br>不能返回局部变量</p>
<p>#</p>
]]></content>
  </entry>
  <entry>
    <title>PART2 OOP</title>
    <url>/2020/08/29/wf7rf9/</url>
    <content><![CDATA[<h2 id="oo-十问"><a href="#oo-十问" class="headerlink" title="oo 十问"></a>oo 十问</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990522561-b8a98a05-6e3c-471f-a45a-8e7f1468205c.png#align=left&display=inline&height=439&margin=%5Bobject%20Object%5D&originHeight=439&originWidth=775&status=done&style=none&width=775" alt=""></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990522541-f8f1bb96-4ea4-4d5d-9942-6eff8cae02d7.png#align=left&display=inline&height=420&margin=%5Bobject%20Object%5D&originHeight=420&originWidth=679&status=done&style=none&width=679" alt=""></p>
<p>结构化——》命令的集合，可化为线性</p>
<p>oo：向对象发送消息</p>
<p>分类：Objected-Oriented</p>
<p>Object-Based (without Inheritance)</p>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>成员变量，成员函数<br>头文件和源文件<br>头文件：声明</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tdate</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="function"><span class="keyword">void</span> <span class="title">setDate</span><span class="params">(<span class="keyword">int</span> y,<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line">    	<span class="function"><span class="keyword">int</span> <span class="title">isLeapYear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	<span class="keyword">int</span> year,month,day;</span><br><span class="line">&#125;;<span class="comment">//头文件date.h</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tdate::setDate</span><span class="params">(<span class="keyword">int</span> y,<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">//Tdate加在函数名之前返回类型后面，说明是头文件类的方法</span></span><br><span class="line">    year=y;</span><br><span class="line">    month=m;</span><br><span class="line">    data=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Tdate::isLeapYear</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> (year%<span class="number">4</span> == <span class="number">0</span> &amp;&amp; year%<span class="number">100</span> != <span class="number">0</span>) || (year%<span class="number">400</span>==<span class="number">0</span>);&#125;</span><br><span class="line"><span class="comment">//源文件date.cpp</span></span><br><span class="line"></span><br><span class="line">TDate g;<span class="comment">//直接创建对象，并非引用。全局对象，创建在全局静态存储区域</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;     g.SetDate(<span class="number">2000</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      TDate t;<span class="comment">//存储在栈区</span></span><br><span class="line">      t.SetDate(<span class="number">2015</span>,<span class="number">11</span>,<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">      TDate  *p = <span class="keyword">new</span> TDate;<span class="comment">//引用，heap</span></span><br><span class="line">      p-&gt;SetDate(<span class="number">2015</span>,<span class="number">11</span>,<span class="number">17</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果直接在头文件实现类，那么编译器会将成员函数作为 inline 函数。</p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>对象的初始化，内存的分配。</p>
<p>与类同名，无返回类型；自动调用，不可以直接调用；可重载</p>
<p>默认构造函数，无参数。当类中未提供构造函数时，编译系统提供</p>
<p>当一个对象未完成初始化时，其内存是不确定，此时并不算完整的对象。因此，默认构造函数，主要任务是建立标识符，对其内存分配，而非成员变量的赋值。</p>
<p>： 单例，只能通过类内部进行创建。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line">作用：保证一个<span class="class"><span class="keyword">class</span>只有一个实体（<span class="title">instance</span>），并为它提供一个全局唯一的访问点</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">singleton</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	~singleton()&#123;<span class="comment">//析构时使用&#125;</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> singleton* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(_instance == <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			_instance = <span class="keyword">new</span> singleton();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> _instance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">static</span> singleton *_instance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//最好将所有此类的实例化的进口全部堵死</span></span><br><span class="line">	singleton()</span><br><span class="line">	&#123;	&#125;</span><br><span class="line">	singleton(<span class="keyword">const</span> singleton&amp;)</span><br><span class="line">	&#123;	&#125;</span><br><span class="line">	singleton&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> singleton &amp;)</span><br><span class="line">	&#123;	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">singleton *singleton::_instance = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990524736-30434b7f-0a56-48c9-b22c-a17e4cfae07b.png#align=left&display=inline&height=317&margin=%5Bobject%20Object%5D&originHeight=317&originWidth=627&status=done&style=none&width=627" alt=""></p>
<h3 id="成员初始化表"><a href="#成员初始化表" class="headerlink" title="成员初始化表"></a>成员初始化表</h3><p>构造函数的补充，减轻编译器负担</p>
<p>先于构造函数，按类数据成员申明次序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span>&amp;z;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	A():y(<span class="number">1</span>),z(x),x(<span class="number">0</span>)&#123;x=<span class="number">100</span>&#125;;<span class="comment">//顺序是先初始化x,y,z，x=100是赋值，不是初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990522560-1d7137f7-5e97-4bba-9e36-22ba5ded106b.png#align=left&display=inline&height=156&margin=%5Bobject%20Object%5D&originHeight=156&originWidth=412&status=done&style=none&width=412" alt=""></p>
<p>初始化大小不是 x：size 未初始化（先初始化的 p）</p>
<p>成员初始化表作用：</p>
<p>与 Java 不同的是，成员变量除了常量类型外，不允许在类内部初始化（C98）</p>
<p>减轻编译器负担：如果用构造函数赋值，对象已经初始化一次，及赋值了两次</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	A()&#123;m=<span class="number">0</span>;&#125;</span><br><span class="line">    	A(<span class="keyword">int</span> m1)&#123;m=m1;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    A a;<span class="comment">//成员对象</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	B()&#123;x=<span class="number">0</span>;&#125;</span><br><span class="line">    	B(<span class="keyword">int</span> x1)&#123;x=x1;&#125;</span><br><span class="line">    	B(<span class="keyword">int</span> x1,<span class="keyword">int</span> m1):a(m1)&#123;x=x1;&#125;<span class="comment">//指定成员对象的构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    B b1;        <span class="comment">//调用B::B()和A::A()</span></span><br><span class="line">    <span class="function">B <span class="title">b2</span><span class="params">(<span class="number">1</span>)</span></span>;   <span class="comment">//调用B::B(int)和A::A()</span></span><br><span class="line">    <span class="function">B <span class="title">b3</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></span>; <span class="comment">//调用B::B(int,int)和A::A(int)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990524066-4f5bd7e8-0f9b-4e51-891d-a9b844c2c311.png#align=left&display=inline&height=196&margin=%5Bobject%20Object%5D&originHeight=196&originWidth=674&status=done&style=none&width=674" alt=""></p>
<h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><p>对象消亡，系统自动调用，heap 上的对象需要手动调用</p>
<p>释放对象持有的非内存资源</p>
<p>可声明为 private：无法在 stack 上分配对象，只能在 heap 上，强制自主控制对象存储分配,也不能直接 delete，需用手动调用对象的消除</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	A():</span><br><span class="line">    	<span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	～A();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A a;<span class="comment">//报错</span></span><br><span class="line">    A *p=<span class="keyword">new</span> A;<span class="comment">//只能在堆上分配对象（栈资源有限）</span></span><br><span class="line">    p-&gt;destroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>析构函数，类中获取的额外资源（文件资源，网络资源等）释放</p>
<h3 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h3><p>创建对象时，用一同类的对象对其初始化</p>
<p>自动调用</p>
<blockquote>
<p>浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</p>
</blockquote>
<p>public:A(const A&amp; a);(引用&amp;，否则变为递归)</p>
<p>默认拷贝构造函数：Ø 逐个成员初始化(member-wise initialization) Ø 对于对象成员，该定义是递归的</p>
<p>浅拷贝问题：悬挂指针（解决：重载拷贝构造函数和操作符=）</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990524066-4f5bd7e8-0f9b-4e51-891d-a9b844c2c311.png#align=left&display=inline&height=196&margin=%5Bobject%20Object%5D&originHeight=196&originWidth=674&status=done&style=none&width=674" alt=""></p>
<p>通常在深拷贝时，采用自定义拷贝构造函数</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990525301-71ad3959-7990-4188-b92a-51afc3afc4e7.png#align=left&display=inline&height=309&margin=%5Bobject%20Object%5D&originHeight=309&originWidth=339&status=done&style=none&width=339" alt=""></p>
<h3 id="移动构造函数"><a href="#移动构造函数" class="headerlink" title="移动构造函数"></a>移动构造函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">generate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">"test"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> S=generate();</span><br></pre></td></tr></table></figure>

<p>可声明成 private:编译器不能调用拷贝构造函数，防止对象按值传递（需按引用传递）</p>
<h3 id="动态内存"><a href="#动态内存" class="headerlink" title="动态内存"></a>动态内存</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990525352-8b4e118c-d920-4036-844a-17cc6e025798.png#align=left&display=inline&height=452&margin=%5Bobject%20Object%5D&originHeight=452&originWidth=730&status=done&style=none&width=730" alt=""></p>
<p>在 heap 中创建对象</p>
<p>引入 new,delete:正确引用 constructor/destructor</p>
<p>malloc 不调用构造函数</p>
<p>free 不调用析构函数</p>
<p>new 可重载</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	A();</span><br><span class="line">    	A();</span><br><span class="line">&#125;</span><br><span class="line">A *p,*q;</span><br><span class="line">p = <span class="keyword">new</span> A;</span><br><span class="line"> <span class="comment">//在程序的heap中申请一块大小为sizeof(A)的内存</span></span><br><span class="line"><span class="comment">//调用A的默认构造函数对该空间上的对象初始化</span></span><br><span class="line"><span class="comment">//返回创建的对象的地址并赋值给p malloc不会进行后两步</span></span><br><span class="line"></span><br><span class="line">q = <span class="keyword">new</span> A(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//调用A的另一个构造函数 A::A(int)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>  p;</span><br><span class="line"><span class="comment">//调用p所指向的对象的析构函数</span></span><br><span class="line"><span class="comment">//释放对象空间</span></span><br><span class="line"><span class="keyword">delete</span> q;</span><br></pre></td></tr></table></figure>

<p>对象创建：</p>
<p>type ptrName= new type;</p>
<p>type ptrName= new type（params);</p>
<p>对象删除：</p>
<p>delete 后设置指针为 NULL</p>
<p>delete intPtr;</p>
<p>inPtr=NULL;//否则该指针为悬挂指针，今后可能用</p>
<h4 id="动态对象数组"><a href="#动态对象数组" class="headerlink" title="动态对象数组"></a>动态对象数组</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">A *p;</span><br><span class="line">p=<span class="keyword">new</span> A[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">delete</span> []p;</span><br><span class="line"><span class="comment">//不能显示初始化，相应的类必须有默认构造函数，delete 中[]不能省</span></span><br></pre></td></tr></table></figure>

<h4 id="动态二维数组"><a href="#动态二维数组" class="headerlink" title="动态二维数组"></a>动态二维数组</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990525296-fa4e4608-d1a8-4f84-b8d4-9f42b9dd1daf.png#align=left&display=inline&height=468&margin=%5Bobject%20Object%5D&originHeight=468&originWidth=853&status=done&style=none&width=853" alt=""></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990528333-147a995c-747b-4261-bc48-975ae71b9975.png#align=left&display=inline&height=413&margin=%5Bobject%20Object%5D&originHeight=413&originWidth=567&status=done&style=none&width=567" alt=""></p>
<h3 id="const-成员"><a href="#const-成员" class="headerlink" title="const 成员"></a>const 成员</h3><p>初始化放在成员初始化表中，原因：常量只能在初始化时确定值，不能赋值</p>
<p>类中 const 成员，仅在类生存的生命周期内存在，特殊情况：static const 编译期内常量</p>
<p>const 成员变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">const</span>  <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">	     A(<span class="keyword">int</span> c): x(c) &#123;  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>const 成员函数，加上关键字 const（方法声明之后）</p>
<p>常对象只能调用常成员函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1);</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span><span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A::f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  x = <span class="number">1</span>; y = <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A::show</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;  <span class="built_in">cout</span> &lt;&lt;x &lt;&lt; y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> A <span class="title">a</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">a.f();<span class="comment">//error,不可更改常对象内容</span></span><br><span class="line">a.show();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果 f()定义为 const，编译器会报错原因如下<br>类中函数默认参数有<em>const this；<br>void f(A</em> const this)<br>当 const 修饰时，void show(const A* const this);this 指向对象内容不可更改</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> &amp; indirect_int;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     A():indirect_int(*<span class="keyword">new</span> <span class="keyword">int</span>)&#123; ... &#125;</span><br><span class="line">    ~A() &#123; <span class="keyword">delete</span> &amp;indirect_int; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; indirect_int++; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//可更改indirect_int</span></span><br></pre></td></tr></table></figure>

<p>可看出 const 是防止直接改变值。</p>
<p>mutable：允许直接改变值。</p>
<h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><p>同一个类不同对象共享变量：</p>
<ol>
<li>如果共享变量定义为全局变量，则缺乏数据保护</li>
<li>名污染。不同类访问共同的变量</li>
</ol>
<p>静态成员变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span>   x,y;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> shared;</span><br><span class="line">        .....</span><br><span class="line">	&#125;;</span><br><span class="line"><span class="keyword">int</span> A::shared=<span class="number">0</span>;<span class="comment">//定义必须放在类的外部，放在实现文件，不放在头文件，且只能定义一次</span></span><br><span class="line">A a, b;</span><br></pre></td></tr></table></figure>

<p>静态成员函数：只能存取 静态成员函数，调用静态成员函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">	&#123;</span>    <span class="keyword">static</span> <span class="keyword">int</span> shared;</span><br><span class="line">	     <span class="keyword">int</span> x;</span><br><span class="line">	 <span class="keyword">public</span>:</span><br><span class="line">	     <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; …shared…&#125;</span><br><span class="line">	     <span class="function"><span class="keyword">void</span> <span class="title">q</span><span class="params">()</span> </span>&#123; …x…shared…&#125;</span><br><span class="line">	&#125;;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990524697-274823ec-ef23-4036-8239-7219cf86ce0c.png#align=left&display=inline&height=353&margin=%5Bobject%20Object%5D&originHeight=353&originWidth=436&status=done&style=none&width=436" alt=""></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>	&#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> obj_count;</span><br><span class="line">	        …</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">	      A()  &#123;   obj_count++; &#125;</span><br><span class="line">	      ~A()  &#123;   obj_count--; &#125;</span><br><span class="line">	      static int get_num_of_obj() ；</span><br><span class="line">	         …</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span>  A::obj_count=<span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span>  <span class="title">A::get_num_of_obj</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> obj_count; &#125;</span><br><span class="line"><span class="comment">//类对象计数</span></span><br></pre></td></tr></table></figure>

<p>example：</p>
<p>单件模式 singleton</p>
<p>构造函数为私有，用静态函数计数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">singleton</span></span></span><br><span class="line"><span class="class">&#123;</span>	<span class="keyword">protected</span>:<span class="comment">//外界不能创建</span></span><br><span class="line">		 singleton()&#123;&#125;</span><br><span class="line">		 singleton(<span class="keyword">const</span> singleton &amp;);</span><br><span class="line">	<span class="keyword">public</span>:<span class="comment">//static来创建</span></span><br><span class="line">		<span class="function"><span class="keyword">static</span> singleton * <span class="title">instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">		</span>&#123;   <span class="keyword">return</span>  m_instance == <span class="literal">NULL</span>?</span><br><span class="line">				m_instance = <span class="keyword">new</span> singleton: m_instance;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span>  </span>&#123; <span class="keyword">delete</span> m_instance; m_instance = <span class="literal">NULL</span>; &#125;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="keyword">static</span> singleton * m_instance;</span><br><span class="line">&#125;;</span><br><span class="line">singleton * singleton ::m_instance= <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><p>类外部不能访问该类的 private 成员。若通过该类的 public 方法会降低 private 成员的访问效率</p>
<p>友元可以访问该类的私有变量或者函数</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990524440-4c2829cb-3775-449a-8a0e-068b7ac8bf29.png#align=left&display=inline&height=279&margin=%5Bobject%20Object%5D&originHeight=279&originWidth=626&status=done&style=none&width=626" alt=""></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">C::f</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>友元不具有传递性</p>
<p>使用友元的原则</p>
<ul>
<li>避免将 data member 放在公开接口中</li>
<li>努力让接口完满且最小化</li>
</ul>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>基于目标代码复用</p>
<h3 id="单继承（考试重点）"><a href="#单继承（考试重点）" class="headerlink" title="单继承（考试重点）"></a>单继承（考试重点）</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span>       <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">         <span class="keyword">char</span> nickname[<span class="number">16</span>];</span><br><span class="line">         <span class="function"><span class="keyword">void</span> <span class="title">set_ID</span><span class="params">(<span class="keyword">int</span> x)</span>  </span>&#123; id = x; &#125;</span><br><span class="line">         <span class="function"><span class="keyword">void</span> <span class="title">SetNickName</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123; <span class="built_in">strcpy</span>(nickname,s);&#125;</span><br><span class="line">         <span class="function"><span class="keyword">void</span> <span class="title">showInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">         </span>&#123; <span class="built_in">cout</span> &lt;&lt; nickname &lt;&lt; “ : “ &lt;&lt; id &lt;&lt;<span class="built_in">endl</span>; &#125;</span><br><span class="line"> 		 <span class="function"><span class="keyword">void</span> <span class="title">showInfo</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">             <span class="built_in">cout</span> &lt;&lt; nickname &lt;&lt; “ : “ &lt;&lt; id &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">             <span class="built_in">cout</span>&lt;&lt;x;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Undergraduated_Student</span> :</span> <span class="keyword">public</span> Student<span class="comment">//建议public继承</span></span><br><span class="line">&#123;       <span class="keyword">int</span> dept_no;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">         <span class="function"><span class="keyword">void</span> <span class="title">setDeptNo</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; dept_no = x; &#125;</span><br><span class="line">         <span class="function"><span class="keyword">void</span> <span class="title">set_ID</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;...&#125;<span class="comment">//id不可访问</span></span><br><span class="line">		 <span class="function"><span class="keyword">void</span> <span class="title">showInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">             <span class="built_in">cout</span>&lt;&lt;dept_no&lt;&lt;<span class="string">":"</span>&lt;&lt;nickname&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">         &#125;<span class="comment">//overwritten，对基类所有同名函数隐藏</span></span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">   		Student::nickname;<span class="comment">//要声明作用域，否则是重新声明</span></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">setNickName</span><span class="params">()</span>:</span></span><br><span class="line">&#125;;</span><br><span class="line">Undergraduated_Student u;</span><br><span class="line">u.showInfo(<span class="number">10</span>);<span class="comment">//error.不可访问。在Undergraduated_Student名空间进行匹配，匹配上showInfo时进行参数匹配。参数匹配不上，不再会去其他名空间匹配。可以using Student::showInfo</span></span><br></pre></td></tr></table></figure>

<p>在没有继承的情况下，protected 和 private 相同。有继承时，派生类可以访问基类的 protected 成员</p>
<p>派生类不能访问基类对象的 protected 成员(传入已创建好的基类对象）</p>
<p>派生类继承基类中的数据，但不可访问</p>
<p>如果不是公有继承则基类中的所有 public 成员将会变为 private</p>
<p>构造函数和析构函数，赋值操作符重载函数不可继承。</p>
<p>c++与 Java 不同的是，派生类中的函数是重写而不是覆盖。如果需要覆盖，需要指明该函数是 virtual。只要派生类中有同名函数，会对基类其他所有同名函数（参数可能不同）进行隐藏。</p>
<p>。即虚函数。虚函数代表的是多态，而重写是静态绑定</p>
<p>继承方式：private，基类中的成员只和基类访问说明符有关。派生类的用户（派生类的派生类）则与继承方式有关</p>
<h3 id="友元和-protected"><a href="#友元和-protected" class="headerlink" title="友元和 protected"></a>友元和 protected</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">class <span class="title">Base</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">protected</span> :</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> prot_mem;</span></span></span><br><span class="line"><span class="function"><span class="params">&#125; ;</span></span></span><br><span class="line"><span class="function"><span class="params">class Sneaky : <span class="keyword">public</span> Base &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">friend</span> <span class="keyword">void</span> clobber&#123;Sneaky&amp;)</span> </span>;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">void</span> clobber&#123;Base&amp;);</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clobber</span><span class="params">(Sneaky &amp;s)</span> </span>&#123; s.j = s.prot_mem = <span class="number">0</span>; &#125;</span><br><span class="line"><span class="comment">//正确：clobber 能访问Sneaky对象的private和protected成员</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clobber</span><span class="params">(Base &amp;b)</span> </span>&#123; b.prot_mem = <span class="number">0</span>; &#125;</span><br><span class="line"><span class="comment">//错误： clobber 不能访问Base的protected 成员</span></span><br></pre></td></tr></table></figure>

<p>原因是，派生类的友元只能访问派生类的基类保护成员，不能直接访问基类友元</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990524402-eeeb8d10-53c8-4536-bfe2-526110668ec4.png#align=left&display=inline&height=361&margin=%5Bobject%20Object%5D&originHeight=361&originWidth=402&status=done&style=none&width=402" alt=""></p>
<p>成员对象初始化与声明顺序有关</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598017699970-6a043c4a-e925-4498-8096-dffcc238a728.png#align=left&display=inline&height=504&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1008&originWidth=1538&size=299830&status=done&style=none&width=769" alt="image.png"><br>B 的拷贝构造函数会默认初始化 A</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span> <span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> A::A; <span class="comment">//继承A所有的构造函数</span></span><br></pre></td></tr></table></figure>

<h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><h4 id="类型相容"><a href="#类型相容" class="headerlink" title="类型相容"></a>类型相容</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990524694-4eb4860d-8c5b-453c-9f17-d9273e61e519.png#align=left&display=inline&height=176&margin=%5Bobject%20Object%5D&originHeight=176&originWidth=580&status=done&style=none&width=580" alt=""></p>
<p>派生类对象赋值给基类：对象切片 ↑（a 对应存储空间比 b 小，b 中自有属性会丢失）</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990524487-b4dc6879-2c99-404c-b71d-603f33184fb9.png#align=left&display=inline&height=105&margin=%5Bobject%20Object%5D&originHeight=105&originWidth=566&status=done&style=none&width=566" alt=""></p>
<p>传参数尽量传引用否则会产生对象切片（信息会丢失）</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990525380-c184975f-696a-4ad2-99e1-ddbb3c0e87cf.png#align=left&display=inline&height=381&margin=%5Bobject%20Object%5D&originHeight=381&originWidth=760&status=done&style=none&width=760" alt=""></p>
<p>func1，func2 A::f()只看形参的类型（静态绑定）</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990524693-3c7e9160-7cee-45d6-a41b-47b40b3fe191.png#align=left&display=inline&height=437&margin=%5Bobject%20Object%5D&originHeight=437&originWidth=439&status=done&style=none&width=439" alt=""></p>
<p>C++默认前期绑定，java 默认动态绑定</p>
<p>动态绑定：根据实际引用和指向对象的类型。</p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法重定义（override）</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990525389-271dc85b-f530-4d29-9fbe-502c076108a2.png#align=left&display=inline&height=419&margin=%5Bobject%20Object%5D&originHeight=419&originWidth=711&status=done&style=none&width=711" alt=""></p>
<h4 id="后期绑定的实现"><a href="#后期绑定的实现" class="headerlink" title="后期绑定的实现"></a>后期绑定的实现</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span>     <span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="title">g</span><span class="params">()</span></span>;</span><br><span class="line">    h();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;      <span class="keyword">int</span> z;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">       f();</span><br><span class="line">      h();</span><br><span class="line">&#125;;</span><br><span class="line">A a; B b;</span><br><span class="line">A *p;</span><br><span class="line">p=&amp;a;或者p=&amp;b;</span><br><span class="line">p-&gt;f();<span class="comment">//f的实现与对象内存绑定在一起</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990528391-f92e3af0-1c9b-4fa6-9d3e-e58c899d3c06.png#align=left&display=inline&height=426&margin=%5Bobject%20Object%5D&originHeight=426&originWidth=530&status=done&style=none&width=530" alt=""></p>
<p>(*_((char _)p-4))(p)//函数调用即 p-&gt;f()</p>
<p>虚函数表(vtable)索引表</p>
<p>效率低：</p>
<p>空间：多 1byte，以及虚函数表</p>
<p>时间：指针的寻址。多一次解引用</p>
<p>非虚函数调用虚函数&amp;虚函数调用非虚函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span>    <span class="keyword">public</span>:</span><br><span class="line">	    A() &#123; f();&#125;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span>  <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">	    <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123; f(); g(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;   <span class="keyword">public</span>:</span><br><span class="line">	    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">	    <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">B b; <span class="comment">//先调用A的构造函数A::A(),A::f(),B::B() 建议不要在构造函数中调用虚函数</span></span><br><span class="line">A *p=&amp;b;</span><br><span class="line">p-&gt;f(); <span class="comment">// B::f()</span></span><br><span class="line">p-&gt;g(); <span class="comment">//A::g() g是静态绑定的，与p类型有关</span></span><br><span class="line">p-&gt;h();	<span class="comment">//A::h, B::f, A::g    h也称为非虚接口即调用虚函数也调用非虚函数，可以替换部分内容，对应着模板模式。全局函数可以做成非虚接口来实现多态</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span>  <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">( )</span> </span>;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;   <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">( )</span> </span>&#123; g(); &#125;<span class="comment">//f(B* const this)，this-&gt;g();</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">B b;</span><br><span class="line">A* p = &amp;b;</span><br><span class="line">p-&gt;f(); <span class="comment">//都调用b的版本，虚函数调用非虚函数，对象是派生类的</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990525365-a070081c-5a5a-4dad-baf9-04ca59dfd6a5.png#align=left&display=inline&height=485&margin=%5Bobject%20Object%5D&originHeight=485&originWidth=709&status=done&style=none&width=709" alt=""></p>
<p>int f2()override//错误，编译器不允许编译器的重定义</p>
<h4 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h4><p>相当于 Java 里的接口</p>
<p>声明时，在函数原型后面加上=0；</p>
<p>往往只声明，不实现</p>
<h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>至少包含一个纯虚函数</p>
<p>不能创建对象,为派生类提供框架，派生类提供抽象基类的所有成员函数的实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span></span></span><br><span class="line"><span class="class">&#123;</span>      …</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">       <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990524775-e0fda813-8f9d-4043-b50f-64b0eb49b953.png#align=left&display=inline&height=429&margin=%5Bobject%20Object%5D&originHeight=429&originWidth=621&status=done&style=none&width=621" alt=""></p>
<h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990525364-12d2c664-1371-4d03-8c10-8cb6eabe29a8.png#align=left&display=inline&height=534&margin=%5Bobject%20Object%5D&originHeight=534&originWidth=663&status=done&style=none&width=663" alt=""></p>
<h4 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h4><h4 id="私有继承"><a href="#私有继承" class="headerlink" title="私有继承"></a>私有继承</h4><p>只继承实现，不继承接口。（派生类不转化为基类</p>
<p>has-a 关系</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990525442-2f6ae85b-5523-4b64-b62a-b7c53a9ff50e.png#align=left&display=inline&height=440&margin=%5Bobject%20Object%5D&originHeight=440&originWidth=814&status=done&style=none&width=814" alt=""></p>
<h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><p>定义：</p>
<p><em>class</em> &lt;派生类名&gt;：[&lt;继承方式&gt;] &lt;基类名 1&gt;，</p>
<p>[&lt;继承方式&gt;] &lt;基类名 2&gt;，…</p>
<p><em>{</em> 〈成员表〉<em>}</em></p>
<p>继承方式</p>
<p><em>public_、_private</em> 、<em>protected</em></p>
<p>继承方式及访问控制的规定同单继承</p>
<p>派生类拥有所有基类的所有成员</p>
<p>初始化顺序/基类的声明次序：</p>
<p>对基类构造函数/析构函数的调用次序</p>
<p>对基类数据成员的存储安排</p>
<p>名冲突：&lt;基类名&gt;::&lt;基类成员名&gt;</p>
<p>虚基类</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1597990525369-da07800c-5372-4d55-9fda-7bed69dfba14.png#align=left&display=inline&height=303&margin=%5Bobject%20Object%5D&originHeight=303&originWidth=584&status=done&style=none&width=584" alt=""></p>
<p>#</p>
]]></content>
  </entry>
  <entry>
    <title>part 3</title>
    <url>/2020/08/29/anho43/</url>
    <content><![CDATA[<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul>
<li>同一论域中一个元素可有多种解释</li>
<li>提高语言灵活性</li>
<li>程序设计语言<ul>
<li>一名多用 ——函数重载</li>
<li>类属  ——template</li>
<li>OO 程序设计——虚函数</li>
</ul>
</li>
</ul>
<h3 id="操作符重载"><a href="#操作符重载" class="headerlink" title="操作符重载"></a>操作符重载</h3><h4 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h4><p>名同，参数不同；</p>
<p>静态绑定（调用函数是确定的）由 compiler/linker 决定</p>
<p>歧义控制：顺序，最佳匹配（每个实参的都不差，有一个实参匹配更好）</p>
<h4 id="操作符重载-1"><a href="#操作符重载-1" class="headerlink" title="操作符重载"></a>操作符重载</h4><p>参数至少包含一个用户自定义类型 (new、delete 除外）</p>
<ul>
<li>动机<ul>
<li>built_in 类型  compiler</li>
<li>自定义数据类型 程序员</li>
</ul>
</li>
<li>作用</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span></span></span><br><span class="line"><span class="class">&#123;</span>      <span class="keyword">double</span> real, imag;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">       Complex() &#123; real = <span class="number">0</span>; imag = <span class="number">0</span>; &#125;</span><br><span class="line">       Complex(<span class="keyword">double</span> r, <span class="keyword">double</span> i) &#123; real = r; imag = i; &#125;</span><br><span class="line"> 	   Complex <span class="keyword">operator</span> + (Complex&amp; x)&#123;</span><br><span class="line">         Complex temp;</span><br><span class="line">	     temp.real = real+x.real;</span><br><span class="line">	     temp.imag = imag+x.imag;</span><br><span class="line">	     <span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">       <span class="function">Complex <span class="title">add</span><span class="params">(Complex&amp; x)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">Complex   a(1,2),b(3,4), c;</span><br><span class="line">c = a.add(b);<span class="comment">//期望写成c=a+b</span></span><br><span class="line">c=a+b;<span class="comment">//c=a.operator +(b);类似于函数重载</span></span><br></pre></td></tr></table></figure>

<p>输出操作符重载</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Day &#123; SUN, MON, TUE, WED, THU, FRI, SAT&#125;;</span><br><span class="line">Day&amp; <span class="keyword">operator</span>++(Day&amp; d)</span><br><span class="line">&#123;  <span class="keyword">return</span> d= (d==SAT)? SUN: Day(d+<span class="number">1</span>); &#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; o, Day&amp; d)</span><br><span class="line">&#123;	<span class="keyword">switch</span> (d)</span><br><span class="line">	&#123;	<span class="keyword">case</span> SUN: o &lt;&lt; <span class="string">"SUN"</span> &lt;&lt; <span class="built_in">endl</span>;<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> MON: o &lt;&lt; <span class="string">"MON"</span> &lt;&lt; <span class="built_in">endl</span>;<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> TUE: o &lt;&lt; <span class="string">"TUE"</span> &lt;&lt; <span class="built_in">endl</span>;<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> WED: o &lt;&lt; <span class="string">"WED"</span> &lt;&lt; <span class="built_in">endl</span>;<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> THU: o &lt;&lt; <span class="string">"THU"</span> &lt;&lt; <span class="built_in">endl</span>;<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> FRI: o &lt;&lt; <span class="string">"FRI"</span> &lt;&lt; <span class="built_in">endl</span>;<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> SAT: o &lt;&lt; <span class="string">"SAT"</span> &lt;&lt; <span class="built_in">endl</span>;<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> o;</span><br><span class="line">&#125;<span class="comment">//返回是ostream原因是要链式调用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;      Day d=SAT;</span><br><span class="line">       ++d;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不可重载的操作符 .（成员访问运算符）  .*（成员指针访问运算符） :: （域操作符）?:（条件运算符）</p>
<p>.、.*运算符不能重载是为了保证访问成员的功能不能被改变，域运算符合 sizeof 运算符的运算对象是类型而不是变量或一般表达式，不具备重载的特征。</p>
<p>重载原则</p>
<ul>
<li>方式<ul>
<li>类成员函数</li>
<li>带有类参数的全局函数</li>
</ul>
</li>
<li>遵循原有语法</li>
</ul>
<p>单目/双目</p>
<p>优先级</p>
<p>结合性</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span>    <span class="keyword">int</span> x;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      A(<span class="keyword">int</span> i):x(i)&#123;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; … &#125;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123; … &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> <span class="keyword">void</span> (A::*p_f)() ;<span class="comment">//函数指针</span></span><br><span class="line"></span><br><span class="line">  p_f= &amp;A::f;</span><br><span class="line"> (a.*p_f)();</span><br></pre></td></tr></table></figure>

<h4 id="双目操作符重载"><a href="#双目操作符重载" class="headerlink" title="双目操作符重载"></a>双目操作符重载</h4><ol>
<li>类成员函数</li>
</ol>
<p>格式</p>
<p><ret type> operator_ _# (<arg>)</p>
<p><em>this</em>   隐含</p>
<p>使用</p>
<p>&lt; class name&gt; a, b;</p>
<p><em>a # b ;</em></p>
<p><em>a.operator#(b) ;</em></p>
<ol start="2">
<li>全局函数</li>
</ol>
<p>友元</p>
<p><em>friend _<ret type></em> operator_ <em>#</em> <em>(<arg>,<arg>)</em></p>
<p>格式</p>
<p><ret type> <em>operator</em> <em>#</em> <em>(<arg>,<arg>)</em></p>
<p>限制</p>
<p><em>=  ()  []</em> -&gt;不能作为全局函数重载</p>
<p>当类中没有定义赋值运算符重载成员函数时,当程序执行到某一赋值语句时，程序就会调用与赋值语句中右值类型匹配的构造函数，而把这右值当作此构造函数的实参。有重载赋值操作符时，执行赋值语句时，程序就只会去调用相应的赋值运算符重载函数</p>
<p>=：1、因为它认为类中并没有重载赋值运算符的成员函数，所以它根据 C++的规则，会去调用相应的构造函数。<br>2、但是在全局里，我们已经重载了参数类型为此类类型的赋值运算符函数，而这赋值语句刚好和这函数匹配上了，根据 C++的规则，也会去调用这函数。<br>其他的操作符同理。</p>
<ol start="3">
<li>全局函数作为补充</li>
</ol>
<p>obj+10 与 10+obj 成员函数不能同时支持（第一个参数是成员函数）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CL</span></span></span><br><span class="line"><span class="class">&#123;</span>     <span class="keyword">int</span> count;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">       <span class="keyword">friend</span> CL <span class="keyword">operator</span> +(<span class="keyword">int</span> i, CL&amp; a);</span><br><span class="line">      <span class="keyword">friend</span> CL <span class="keyword">operator</span> +(CL&amp; a, <span class="keyword">int</span> i);</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure>

<p>单目运算符最好重载为类成员函数</p>
<p>双面运算符最好重载为类友元函数</p>
<h4 id="永远不要重载-amp-amp"><a href="#永远不要重载-amp-amp" class="headerlink" title="永远不要重载&amp;&amp; ||"></a>永远不要重载&amp;&amp; ||</h4><p>短路现象</p>
<p><em>if ((p != 0) &amp;&amp; (strlen(p) &gt;10))</em></p>
<p>重载前，编译器判断 p!=0 如果 p==0，则不会检测后半部分</p>
<p>重载后，编译器会函数调用，不会有短路现象</p>
<h4 id="单目操作符"><a href="#单目操作符" class="headerlink" title="单目操作符"></a>单目操作符</h4><p>如：++</p>
<p>类函数：<ret type> operator #()</p>
<p>全局函数：<ret type> operator #(<arg>)<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598060645825-abc25c8a-deb2-4d7c-aea3-f69e54533954.png#align=left&display=inline&height=482&margin=%5Bobject%20Object%5D&name=image.png&originHeight=964&originWidth=1126&size=136601&status=done&style=none&width=563" alt="image.png"></p>
<h4 id="特殊操作符重载"><a href="#特殊操作符重载" class="headerlink" title="特殊操作符重载"></a>特殊操作符重载</h4><h5 id="重载-new"><a href="#重载-new" class="headerlink" title="重载 new"></a>重载 new</h5><p>定位 new</p>
<p>new 重载可以带其他参数</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598021045311-057360f1-67cc-4e59-96b6-b9f38624150c.png#align=left&display=inline&height=331&margin=%5Bobject%20Object%5D&originHeight=331&originWidth=630&status=done&style=none&width=630" alt=""></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="keyword">sizeof</span>(A)];</span><br><span class="line">A *a=<span class="keyword">new</span> (buf)A;<span class="comment">//A的对象分配到buf所指的地址空间上</span></span><br></pre></td></tr></table></figure>

<h5 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h5><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598021045483-e1985ac2-4098-40c9-9f44-a7fea8239f68.png#align=left&display=inline&height=426&margin=%5Bobject%20Object%5D&originHeight=426&originWidth=803&status=done&style=none&width=803" alt=""></p>
<p>定义了 new 后需要定义对应的 delete</p>
<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><ol>
<li>源代码复用机制</li>
<li>参数化模板</li>
<li>多态一种形式</li>
</ol>
<h4 id="类属函数"><a href="#类属函数" class="headerlink" title="类属函数"></a>类属函数</h4><p>同一个函数对不同类型的数据完成相同的操作</p>
<ol>
<li>宏实现： #define max(a,b) ((a)&gt;(b)?(a):(b)).缺陷 只能实现简单的功能，没有类型检查</li>
<li>函数重载：缺陷需要定义的重载函数太多，定义不全</li>
<li>函数指针： void sort(void<em>,unsigned int ,unsigned int,int(*cmp)(void</em>,void*))缺陷 需要定义额外参数，大量指针运算，实现复杂，可读性差</li>
<li>函数模板：<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598021045432-26b05e0f-9c84-4b20-b143-c29105b161b8.png#align=left&display=inline&height=310&margin=%5Bobject%20Object%5D&originHeight=310&originWidth=519&status=done&style=none&width=519" alt=""></li>
</ol>
<p>Template :C98 之前(与类 class 含义不同)</p>
<p>Template 本身不被编译进去</p>
<p>模板支持内置类型（int) 也支持自定义类型，此时需要重载操作符</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598021045622-cea53cdb-bb1c-4612-b518-30793d2b13af.png#align=left&display=inline&height=529&margin=%5Bobject%20Object%5D&originHeight=529&originWidth=817&status=done&style=none&width=817" alt=""></p>
<p>显式实例化：调用的时候把尖括号里的东西显式的写出来</p>
<p>template<templateA></p>
<p>函数模板默认参数位置比较灵活（一般函数默认参数从右开始复制）</p>
<p>函数模板和函数重载配合使用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">max</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>)</span></span><br><span class="line"><span class="class">&#123;</span> <span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">…</span><br><span class="line"><span class="keyword">int</span>  x, y, z;</span><br><span class="line"><span class="keyword">double</span> l, m, n;</span><br><span class="line">z = <span class="built_in">max</span>(x,y);</span><br><span class="line">l = <span class="built_in">max</span>(m,n);</span><br><span class="line"></span><br><span class="line"><span class="built_in">max</span>(x,m);<span class="comment">//?</span></span><br><span class="line"><span class="comment">//定义一个max重载函数,编译器会优先匹配重载函数</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="类属类"><a href="#类属类" class="headerlink" title="类属类"></a>类属类</h4><p>类定义带有类型参数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span>    T <span class="built_in">buffer</span>[<span class="number">100</span>];</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T x)</span></span>;</span><br><span class="line">     <span class="function">T <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;//需要再次声明<span class="title">T</span>是类型参数</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Stack</span> &lt;T&gt;:</span>:push(T x) &#123; …  &#125;<span class="comment">//某个类型会具体实例化的stack</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">Stack</span> &lt;T&gt;:</span>:pop() &#123; … &#125;</span><br><span class="line">……</span><br><span class="line">Stack &lt;<span class="keyword">int</span>&gt; st1; <span class="comment">//显式实例化</span></span><br><span class="line">Stack &lt;<span class="keyword">double</span>&gt; st2;</span><br></pre></td></tr></table></figure>

<p>每个方法前需要再次声明 T</p>
<p>返回时也要再次声明</p>
<p>显式实例化</p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>常见的处理方法：</p>
<ul>
<li>函数参数（返回值。引用参数）</li>
<li>逐层返回</li>
</ul>
<h3 id="处理机制"><a href="#处理机制" class="headerlink" title="处理机制"></a>处理机制</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598062832280-83b72563-76e4-4d45-aaef-e1f1e9487a40.png#align=left&display=inline&height=336&margin=%5Bobject%20Object%5D&name=image.png&originHeight=672&originWidth=1290&size=99690&status=done&style=none&width=645" alt="image.png"><br>catch(…)捕获所有异常</p>
<h2 id="I-O-处理"><a href="#I-O-处理" class="headerlink" title="I/O 处理"></a>I/O 处理</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598021045489-67b6ae81-9d99-4073-82e7-fb0f32810573.png#align=left&display=inline&height=335&margin=%5Bobject%20Object%5D&originHeight=335&originWidth=564&status=done&style=none&width=564" alt=""></p>
<p>I/O 流库的三类输入/输出操作</p>
<p>控制台 I/O</p>
<p>标准 I/O 设备</p>
<p>cin、cout、cerr、clog（cin 带缓冲，cerr 不带缓冲）</p>
<p>文件 I/O</p>
<p>字符串 I/O</p>
<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><h1 id="c-的新特性"><a href="#c-的新特性" class="headerlink" title="c++的新特性"></a>c++的新特性</h1><p>R-value Reference and Move Constructor<br>Extern Templates<br>Constant Expressions<br>Lambda Function<br>Delegating Constructor<br>Uniform Initialization<br>nullptr</p>
<h2 id="右值引用"><a href="#右值引用" class="headerlink" title="右值引用"></a>右值引用</h2><p>左值和右值的区分标准在于能否获取地址。<br>左值：存储地址，绑定非常量/常量的引用。<br>右值不可以绑定非常量。（许多右值是临时变量）<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598024112224-3ee386fc-ee60-4098-926a-3ba10195db72.png#align=left&display=inline&height=258&margin=%5Bobject%20Object%5D&originHeight=258&originWidth=390&status=done&style=none&width=390" alt=""><br>右值引用 ：&amp;&amp;a</p>
<h2 id="外部模版"><a href="#外部模版" class="headerlink" title="外部模版"></a>外部模版</h2><p>多次实例化效率变低<br>避免多次实例化<br>extern template void func(int);</p>
<h2 id="常量表达式"><a href="#常量表达式" class="headerlink" title="常量表达式"></a>常量表达式</h2><p>constexpr<br>允许表达式内含有用户定义的值<br>编译器会在确定的某一时刻确定该表达式的值<br>老版本：<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598024112471-a9b5acb6-2863-4015-83d5-f9ea9b4296a1.png#align=left&display=inline&height=474&margin=%5Bobject%20Object%5D&originHeight=474&originWidth=1342&status=done&style=none&width=1342" alt=""></p>
<p>新版：<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598024112499-3efaa4db-e6c5-45a8-bcb7-99af38447166.png#align=left&display=inline&height=488&margin=%5Bobject%20Object%5D&originHeight=488&originWidth=1348&status=done&style=none&width=1348" alt=""><br>编译器会在编译时刻计算对应的值</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/jpeg/392607/1598024112464-f80b036f-45fc-4f0c-b6e2-db59534dbb66.jpeg#align=left&display=inline&height=576&margin=%5Bobject%20Object%5D&originHeight=576&originWidth=1376&status=done&style=none&width=1376" alt=""><br>对应的对象会在编译时刻确定对应的值，相当于一组常量，不需要开辟新的内存空间<br>const：只是不能修改对应的值，但是会占用其他的空间资源</p>
<h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h2><p>用来声明函数对象，并可以使用局部变量<br>sort(items.begin(), items.end(),<br>[](int a, int b) { return a &lt; b; } //Lambda Function<br>);</p>
<p>lambda 捕获<br>[]  Capture nothing<br>[&amp;] Capture any referenced variable by reference<br>[=] Capture any referenced variable by making a copy<br>[=, &amp;foo] Capture any referenced variable by making a copy, but capture variable foo by reference<br>[bar] Capture bar by making a copy; don’t copy anything else</p>
<h2 id="Delegating-Constructor-委托构造函数"><a href="#Delegating-Constructor-委托构造函数" class="headerlink" title="Delegating Constructor 委托构造函数"></a>Delegating Constructor 委托构造函数</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598024112605-6bab2243-d760-4fe2-b8f3-85f90e54fc6a.png#alt=04A81750-C068-419B-A26C-CFB40E8D08E2" alt=""></p>
<h2 id="统一初始化"><a href="#统一初始化" class="headerlink" title="统一初始化"></a>统一初始化</h2><p>接受初始化列表<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/jpeg/392607/1598024112429-4d4fd778-8fa9-42d3-b69c-c5f165635880.jpeg#alt=-w410" alt=""></p>
<h2 id="nullptr"><a href="#nullptr" class="headerlink" title="nullptr"></a>nullptr</h2><p>空指针<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/392607/1598024112407-26472d94-7887-45d8-b3b2-4c6c95603deb.png#alt=F687C51E-3DB0-42A9-82C3-5C79B95670DF" alt=""><br>之前的 NULL 一般是 0</p>
]]></content>
  </entry>
</search>
